default:
  retry:
    max: 2
    when: runner_system_failure
  image:
    name: huberoli/debian-c-compile-analyse:latest
    pull_policy: [always, if-not-present]


stages:
   - build
   - test
   - fbinfer
   - scan-build
   - cppcheck
   - sanitizers
   - upload

variables:
  GAMS_MAJVER: "45"
  GCC_MVER: "14"
  TERM: "xterm-256color"
  COLORTERM: "truecolor"
  QA_TMPDIR: /tmp/qa
  EMPLIB_TMPDIR: /tmp/emplib


build:
  stage: build
  variables:
    USER: "gitlab-runner"
  before_script:
    - export N_PROCS=$(grep "cpu cores" /proc/cpuinfo | uniq | tail -c 2) PATH="$HOME"/.local/bin:"$PATH"
    # - sed -i -e 's|http://deb.debian.org|https://ftps.crans.org|' /etc/apt/sources.list.d/debian.sources
      #    - echo 'Dir::Bin::Methods::ftp "ftp";' | tee -a /etc/apt/apt.conf.d/99local-ftp
    - apt-get update -y
    - apt-get install graphviz bzip2 makeself pax-utils -y  # bzip2 for gams-c-api, pax-utils for lddtree
    - apt-get install -y python3-numpy python3-scipy python3-pytest python3-setuptools python-wheel-common python3-venv python3-dev python3-pip
    # swig 4.3 is not quite backwards compatible
    - wget http://ftp.fr.debian.org/debian/pool/main/s/swig/swig4.0_4.1.0-0.2_amd64.deb && dpkg -i swig4.0_4.1.0-0.2_amd64.deb && ln -s /usr/bin/swig4.0 /usr/bin/swig
    - pip install --user --break-system-packages auditwheel
    - 'which ssh-agent || apt-get install openssh-client -y'
    - eval $(ssh-agent -s)
    - wget https://ftp.cs.wisc.edu/math-prog/solvers/path/pathlib/lib_lnx/{libpath50.so,liblusol.so}
  script:
    - mkdir build && cd build
    - cp ../libpath50.so ../liblusol.so .
    - CC=gcc-$GCC_MVER CXX=g++-$GCC_MVER cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGAMS_VERSION=$GAMS_MAJVER -DDISTRIB=28
        -DWITH_BACKWARD=0 -DWITH_BACKTRACE=0 -DBUILD_GAMS_DRIVER=ON -DBUILD_DOCUMENTATION=1 -DGIT_HASH=$CI_COMMIT_SHORT_SHA
        -DBUILD_INSTALLER=1 -DINSTALL_COMMON_MAKESELF=1 -DBUILD_PYTHON=python3 ..
    - make -j$N_PROCS 2>&1 install makeself | tee gcc.log
    - make doc -j$N_PROCS
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .
    - cat compile_commands.json | 
        jq '[.[] | select(.file | contains("apifiles") or contains("PYTHON_wrap") | not )]' | sed -e 's:-fanalyzer::'  > compile_commands2.json
    - mv compile_commands2.json compile_commands.json
    - cp libpath50.so liblusol.so test
    - cp libpath50.so liblusol.so swig
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - apifiles
      - "build/*.run"
      - build/compile_commands.json
      - build/output/gamsconfig_valgrind.yaml
      - build/gcc.log
      - build/libreshop.so
      - build/gui/reshop_imgui
      - build/docs/html
      - build/generated
      - build/makeself
      - build/swig
      - build/test
      - libpath50.so
      - liblusol.so

ctest:
  stage: test
  script:
    - cd build; ctest -D ExperimentalMemCheck || ctest --rerun-failed --output-on-failure
  allow_failure: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - build/Testing/Temporary

gams_test:
  stage: test
  image:
    name: gams/gams:latest
    pull_policy: [always, always, always, if-not-present]

  before_script:
    - export RESHOP_MAKESELF_UNATTENDED=1 GAMSDIR=$(dirname $(which gams)) VALGRIND_DIR="$(pwd)/valgrind"
    - apt-get update
    - apt-get install numdiff wget xz-utils valgrind -y
      # - wget -nv http://perso.crans.org/~huber/libvrepr.tar.xz && tar xf libvrepr.tar.xz -C /tmp/
  script:
    #   - bash build/*.run
    - cp build/makeself/{gmsrhp_ux.out,libreshop.so} "$GAMSDIR"/
    - cp build/output/gamsconfig_valgrind.yaml "$GAMSDIR"/gamsconfig.yaml
    - env EMPSLV=reshop bash test/gams/test.sh
    - mkdir -p "$QA_TMPDIR" && pushd "$QA_TMPDIR" > /dev/null && testlib quality && gams quality lo=2 --solver=reshop; popd > /dev/null; cp "$QA_TMPDIR"/failures_qa.gms .
    - mkdir -p "$EMPLIB_TMPDIR" && pushd "$EMPLIB_TMPDIR" > /dev/null && emplib goempgo && gams goempgo lo=2 --solver=reshop; popd > /dev/null; cp "$EMPLIB_TMPDIR"/failures_emp.gms .
  allow_failure: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - failures_qa.gms
      - failures_emp.gms
      - valgrind

scan-build:
  stage: scan-build
  script:
    - mkdir build-scan-build && cd build-scan-build && sh ../utils/scan-build-ci.sh ..
  allow_failure: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - build-scan-build/scan-build

fbinfer:
  stage: fbinfer
  script:
    - infer run --keep-going --compilation-database build/compile_commands.json; infer-explore --html
  allow_failure: true
  artifacts:
    expire_in: 2 weeks
    when: on_success
    paths:
      - infer-out

cppcheck:
  stage: cppcheck
  script:
    - mkdir -p build && cd build && sh ../utils/cppcheck-ci.sh
    - mv cppcheck ../
  allow_failure: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - cppcheck
  allow_failure: true

sanitizer:
  stage: sanitizers
  before_script:
    - export ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=100:abort_on_error=1

  script:
    - mkdir $COMPILER-$SANITIZER && cd $COMPILER-$SANITIZER && cp ../libpath50.so ../liblusol.so .
    - CC=${COMPILER/_*/} CXX=${COMPILER/*_/} cmake -DCMAKE_BUILD_TYPE=$SANITIZER -DWITH_BACKTRACE=0 -DWITH_BACKWARD=0 -DGIT_HASH=$CI_COMMIT_SHORT_SHA ../
    - make -j$(grep "cpu cores" /proc/cpuinfo | uniq | tail -c 2)
    - export LD_LIBRARY_PATH=$(pwd); ctest -j$(grep "cpu cores" /proc/cpuinfo | uniq | tail -c 2) || ctest --rerun-failed --output-on-failure
  allow_failure: true
  parallel:
    matrix:
      - COMPILER: ["gcc-14_g++-14", "clang-19_clang++-19"]
        SANITIZER: [Asan, UBsan]


upload:
  stage: upload
  when: always
  script:
    - mkdir public
    - mkdir public/valgrind
    - cp build/gcc.log public/ || true
    - cp -r cppcheck public/ || true
    - cp -r build/docs/html public/doxygen || true
    - cp -r build-scan-build/scan-build public/ || true
    - cp -r infer-out/report.html public/report-fbinfer || true
    - cp *.gms public || true
    - cp build/Testing/Temporary/MemoryChecker*.log public/valgrind/ || true
    - cp valgrind/* public/valgrind/ || true
    - find public/valgrind -type f -empty -delete || true  # delete empty files
    - chmod a+rx -R public
    - chmod 600 $SSH_KEY && sed -i 's/\r$//g' $SSH_KEY
    - scp -i $SSH_KEY -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r public huber@zamok.crans.org:www/reshop-ci
