# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Multiplatform (Linux, MacOs, Windows) and multi-compiler builds

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-2025, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, clang-cl]
        include:
          - os: windows-2025
            c_compiler: clang-cl
            cpp_compiler: clang-cl
          - os: windows-2025
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-2025
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: clang-cl
          - os: macos-latest
            c_compiler: clang-cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - uses: actions/setup-python@v5
      with:
        python-version: '3.13' 

    - name: Install dependencies
      run: pip install swig numpy scipy pytest setuptools

    - name: Configure CMake
      if: matrix.build_type != 'Debug' || !contains(matrix.os, 'windows')
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -G Ninja -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_PYTHON=python3
        -DBUILD_GAMS_DRIVER=1
        -S ${{ github.workspace }}

     # On windows and in debug mode, we would need a debug version of the python lib...
    - name: Configure CMake (no python)
      if: matrix.build_type == 'Debug' && contains(matrix.os, 'windows')
      run: >
        cmake -G Ninja -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_GAMS_DRIVER=1
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -v
        cmake --install ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -v

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: matrix.c_compiler != 'gcc' || !contains(matrix.os, 'windows')
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    # As of 2025.09.02, the gcc-mingw toolchain produces a DLL with a dependency to libgcc for TLS.
    # This may or not be the reason the python module can't be loaded. However, tests using newer
    # Mingw releases don't suffer form this. Both clang-cl and clang produces 
    - name: Test (no python)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: matrix.c_compiler == 'gcc' && contains(matrix.os, 'windows')
      run: ctest --build-config ${{ matrix.build_type }} -E python --output-on-failure

    - name: Upload output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/output
        overwrite: true

