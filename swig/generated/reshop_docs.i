// Generated by doxy2numpydoc.py

%feature("autodoc", "empdag_rootsetmp(mdl, mp, /)
--

Set the root of the EMP dag to a mathematical program.

Parameters
----------
mdl : Model
    The model.
mp : MathPrgm
    The mathematical program.
") rhp_empdag_rootsetmp;
%feature("autodoc", "empdag_rootsetmpe(mdl, mpe, /)
--

Set the root of the EMP dag to an equilibrium.

Parameters
----------
mdl : Model
    The model.
mpe : Nash
    The equilibrium.
") rhp_empdag_rootsetmpe;
%feature("autodoc", "empdag_newmp(mdl, sense, /)
--

Allocate an mathprgm object.

Parameters
----------
mdl : Model
    The overall model.
sense : int
    The sense of the MP.

Returns
-------
MathPrgm
    The MathPrgm object.
") rhp_empdag_newmp;
%feature("autodoc", "empdag_newmpe(mdl, /)
--

Allocate an equilibrium object.

Parameters
----------
mdl : Model
    The overall model.

Returns
-------
Nash
    The equilibrium object.
") rhp_empdag_newmpe;
%feature("autodoc", "empdag_mpeaddmp(mpe, mp, /)
--

Add a mathematical programm into the equilibrium.

Parameters
----------
mpe : Nash
    The equilibrium structure.
mp : MathPrgm
    The mathematical programm.
") rhp_empdag_mpeaddmp;
%feature("autodoc", "ensure_mp(mdl, reserve, /)
--

Reserve space for mathematical programms.

This is the first function to call if there are such EMP structure

Parameters
----------
mdl : Model
    The reshop model.
reserve : int
    The number of MP that should have space.
") rhp_ensure_mp;
%feature("autodoc", "arcVF_new()
--

Create a new value function EMPDAG arc.

Returns
-------
ArcVFData
    A value function EMPDAG arc.
") rhp_arcVF_new;
%feature("autodoc", "arcVF_init(arcVF, ei, /)
--

Initialize a value function arc in a given equation.

Parameters
----------
arcVF : ArcVFData
    The value function arc.
ei : EquationRef or int
    The equation index.
") rhp_arcVF_init;
%feature("autodoc", "arcVF_free(arcVF, /)
--

Free a given value function arc.

Parameters
----------
arcVF : ArcVFData
    The arc to free.
") rhp_arcVF_free;
%feature("autodoc", "arcVF_setvar(arcVF, vi, /)
--

Set the variable index in a (simple) value function arc.

Parameters
----------
arcVF : ArcVFData
    The value function arc.
vi : VariableRef or int
    The variable index.
") rhp_arcVF_setvar;
%feature("autodoc", "arcVF_setcst(arcVF, cst, /)
--

Set the constant coefficient in a (simple) value function arc.

Parameters
----------
arcVF : ArcVFData
    The value function arc.
cst : float
    The coefficient.
") rhp_arcVF_setcst;
%feature("autodoc", "empdag_mpaddmpVF(mdl, mp, mp_child, arcVF, /)
--

Add a value function arc between two MathPrgm.

Parameters
----------
mdl : Model
    The model.
mp : MathPrgm
    The parent MathPrgm.
mp_child : MathPrgm
    The child MathPrgm.
arcVF : ArcVFData
    The value function arc.
") rhp_empdag_mpaddmpVF;
%feature("autodoc", "empdag_mpaddmpCTRL(mdl, mp, mp_child, /)
--

Add a control arc between two MathPrgm.

Parameters
----------
mdl : Model
    The model.
mp : MathPrgm
    The parent MathPrgm.
mp_child : MathPrgm
    The child MathPrgm.
") rhp_empdag_mpaddmpCTRL;
%feature("autodoc", "aequ_new()
--

Allocate an abstract equation.

Returns
-------
Equs
    The abstraction equation, or NULL is the allocation failed.
") rhp_aequ_new;
%feature("autodoc", "aequ_newcompact(size, start, /)
--

Create a (vector) equation of continuous indices.

Parameters
----------
size : int
    Size of the variable.
start : int
    Index of the first component of the variable.

Returns
-------
Equs
    The error code.
") rhp_aequ_newcompact;
%feature("autodoc", "aequ_newlist(size, eis, /)
--

Create a (vector) equation which the indices are not necessarily in consecutive order.

Parameters
----------
size : int
    Size of the equation container.
eis : array-like of EquationRef or int
    Array of equation indices.

Returns
-------
Equs
    The error code.
") rhp_aequ_newlist;
%feature("autodoc", "aequ_newlistcopy(size, eis, /)
--

Create a (vector) equation which the indices are not necessarily in consecutive order.

This function duplicates the list of indices

Parameters
----------
size : int
    Size of the equation.
eis : array-like of EquationRef or int
    Array of indices.

Returns
-------
Equs
    The object, or NULL if there is an error.
") rhp_aequ_newlistcopy;
%feature("autodoc", "aequ_get(e, i, /)
--

Get the equation index at position i.

Parameters
----------
e : Equs
    The abstract equation.
i : int
    The element to get.

Returns
-------
int
    The equation index.
") rhp_aequ_get;
%feature("autodoc", "aequ_free(e, /)
--

Free the allocated memory in the abstract equation (including the structure itself!).

Parameters
----------
e : Equs
    The abstract equation.
") rhp_aequ_free;
%feature("autodoc", "aequ_size(e, /)
--

Return the size of the abstract equation.

Parameters
----------
e : Equs
    The abstract equation.

Returns
-------
int
    The size, or 0 is the argument is NULL.
") rhp_aequ_size;
%feature("autodoc", "aequ_gettypename(e, /)
--

Return the string description of the type of an equation container.

Parameters
----------
e : Equs
    The equation container.

Returns
-------
str
    The string description.
") rhp_aequ_gettypename;
%feature("autodoc", "aequ_get_list(e, /)
--

Get the list associated with an equation container.

Parameters
----------
e : Equs
    The equation container.

Returns
-------
array of int
    The array of indices.
") rhp_aequ_get_list;
%feature("autodoc", "aequ_gettype(e, /)
--

Access the type of a equation container.

Parameters
----------
e : Equs
    The equation container.

Returns
-------
int
    The type of the equation container.
") rhp_aequ_gettype;
%feature("autodoc", "aequ_ownmem(e, /)
--

Return true if the equation container owns its memory.

Parameters
----------
e : Equs
    The equation container.

Returns
-------
Bool
    True if the equation container owns its memory.
") rhp_aequ_ownmem;
%feature("autodoc", "aequ_contains(e, ei, /)
--

Check if an abstract equation contains a given index.

Parameters
----------
e : Equs
    The equation container.
ei : EquationRef or int
    The equation index.

Returns
-------
int
    0 if it is not contained, positive number if it is, a negative number for an error.
") rhp_aequ_contains;
%feature("autodoc", "nltree_addlin(mdl, ei, c, v, coeff, /)
--

Add :math:`\\alpha <c,x>` to the nonlinear part of the equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation to modify.
c : array-like of float
    The values of c.
v : Vars
    The variable x.
coeff : float
    The coefficient.
") rhp_nltree_addlin;
%feature("autodoc", "nltree_addquad(mdl, ei, mat, v, coeff, /)
--

Add a quadratic term :math:`.5 x^TMx` to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation to modify.
mat : scipy matrix
    The matrix.
v : Vars
    The variable.
coeff : float
    The coefficient multiplying the quadratic. Note that is coefficient is multiplied by .5.
") rhp_nltree_addquad;
%feature("autodoc", "basis_str(basis, /)
--

Get a textual description of a basis status.

Parameters
----------
basis : enum rhp_basis_status
    The basis status.

Returns
-------
str
    The textual description.
") rhp_basis_str;
%feature("autodoc", "backend_str(backend, /)
--

Get a textual description of a backend type.

Parameters
----------
backend : RhpBackendType
    The backend type.

Returns
-------
str
    The textual description.
") rhp_backend_str;
%feature("autodoc", "gms_newfromcntr(cntrfile, /)
--

Load a model from a ReSHOP control file.

Parameters
----------
cntrfile : str
    The GAMS control file.

Returns
-------
Model
    The model.
") rhp_gms_newfromcntr;
%feature("autodoc", "gms_setgamscntr(mdl, cntrfile, /)
--

Set the gams control file for a given model.

Parameters
----------
mdl : Model
    The model.
cntrfile : str
    The gams control file.
") rhp_gms_setgamscntr;
%feature("autodoc", "gms_setgamsdir(mdl, gamsdir, /)
--

Set the gams system directory for a given model.

Parameters
----------
mdl : Model
    The model.
gamsdir : str
    The gams system directory.
") rhp_gms_setgamsdir;
%feature("autodoc", "gams_setglobalgamscntr(cntrfile, /)
--

Globally set the gams control file.

Parameters
----------
cntrfile : str
    The gams control file.
") rhp_gams_setglobalgamscntr;
%feature("autodoc", "gams_setglobalgamsdir(gamsdir, /)
--

Globally set the gams system directory.

Parameters
----------
gamsdir : str
    The gams system directory.
") rhp_gams_setglobalgamsdir;
%feature("autodoc", "gms_writesol2gdx(mdl, gdxname, /)
--

Write the GMO solution of a GAMS model to a GDX file.

Parameters
----------
mdl : Model
    The GAMS model.
gdxname : str
    The GDX file name.
") rhp_gms_writesol2gdx;
%feature("autodoc", "print_banner()
--

Print the ReSHOP banner.
") rhp_print_banner;
%feature("autodoc", "version()
--

Return the string representation of the ReSHOP version.

Returns
-------
str
    The string representing the ReSHOP version.
") rhp_version;
%feature("autodoc", "show_backendinfo(boolval, /)
--

Control the output of (debugging) backend information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the backend information is not displayed. Otherwise it is not.
") rhp_show_backendinfo;
%feature("autodoc", "show_refcnttrace(boolval, /)
--

Control the output of reference counting information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the reference counting information is not displayed. Otherwise it is not.
") rhp_show_refcnttrace;
%feature("autodoc", "show_empinterptrace(boolval, /)
--

Control the output of (debugging) EMP interpreter information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the EMP interpreter information is not displayed. Otherwise it is not.
") rhp_show_empinterptrace;
%feature("autodoc", "show_empparsertrace(boolval, /)
--

Control the output of (debugging) EMP parser information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the EMP parser information is not displayed. Otherwise it is not.
") rhp_show_empparsertrace;
%feature("autodoc", "show_solreporttrace(boolval, /)
--

Control the output of (debugging) solution reporting information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the solution reporting information is not displayed. Otherwise it is not.
") rhp_show_solreporttrace;
%feature("autodoc", "show_processtrace(boolval, /)
--

Control the output of (debugging) model processing information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the model processing information is not displayed. Otherwise it is not.
") rhp_show_processtrace;
%feature("autodoc", "show_containertrace(boolval, /)
--

Control the output of (debugging) container information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the container information is not displayed. Otherwise it is not.
") rhp_show_containertrace;
%feature("autodoc", "show_empdagtrace(boolval, /)
--

Control the output of (debugging) EMPDAG information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the EMPDAG information is not displayed. Otherwise it is not.
") rhp_show_empdagtrace;
%feature("autodoc", "show_fooctrace(boolval, /)
--

Control the output of (debugging) first-order optimality condition information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the first-order optimality condition information is not displayed. Otherwise it is not.
") rhp_show_fooctrace;
%feature("autodoc", "show_ccftrace(boolval, /)
--

Control the output of (debugging) CCF information in the log for debugging purposes.

Parameters
----------
boolval : unsigned char
    If non-zero, the CCF information is not displayed. Otherwise it is not.
") rhp_show_ccftrace;
%feature("autodoc", "show_timings(boolval, /)
--

Control the output of (debugging) timings information in the log.

Parameters
----------
boolval : unsigned char
    If non-zero, the timings information is not displayed. Otherwise it is not.
") rhp_show_timings;
%feature("autodoc", "show_solver_log(boolval, /)
--

Control the output of (debugging) subsolver log.

Parameters
----------
boolval : unsigned char
    If non-zero, the subsolver log. Otherwise it is not.
") rhp_show_solver_log;
%feature("autodoc", "syncenv()
--

Synchronize the ReSHOP options and switches with the current environment variable values.
") rhp_syncenv;
%feature("autodoc", "mat_free(m, /)
--

Free a matrix.

Parameters
----------
m : scipy matrix
    The matrix to free.
") rhp_mat_free;
%feature("autodoc", "mat_triplet(n, m, nnz, rowidx, colidx, data, /)
--

Build a triplet matrix.

Parameters
----------
n : int
    The number of columns.
m : int
    The number of rows.
nnz : int
    The number of non-zero elements.
rowidx : array of indices
    The row indices.
colidx : array of indices
    The column indices.
data : array-like of float
    The values.

Returns
-------
scipy matrix
    The matrix.
") rhp_mat_triplet;
%feature("autodoc", "mp_getname(mp, /)
--

Get the name of a MathPrgm.

Parameters
----------
mp : struct rhp_mathprgm *
    The MathPrgm.

Returns
-------
str
    The name.
") rhp_mp_getname;
%feature("autodoc", "mp_ncons(mp, /)
--

Get the number of constraints in a MathPrgm.

This is the number of constraint in a classical sense, excluding matching for instance

Parameters
----------
mp : struct rhp_mathprgm *
    The MathPrgm.

Returns
-------
int
    The number of constraints.
") rhp_mp_ncons;
%feature("autodoc", "mp_nmatched(mp, /)
--

Return the number of matching (or generalized complementarity constraints) in a MathPrgm.

Parameters
----------
mp : struct rhp_mathprgm *
    The MathPrgm.

Returns
-------
int
    The number of matching constraint.
") rhp_mp_nmatched;
%feature("autodoc", "mp_nvars(mp, /)
--

Return the number of variables affected to a MathPrgm.

Parameters
----------
mp : struct rhp_mathprgm *
    The Mathrpm.

Returns
-------
int
    The number of variables.
") rhp_mp_nvars;
%feature("autodoc", "mdl_setname(mdl, name, /)
--

Set the model name.

Parameters
----------
mdl : Model
    The model.
name : str
    The name.
") rhp_mdl_setname;
%feature("autodoc", "mdl_fixvar(mdl, vi, val, /)
--

Fix a variable to a given value.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.
val : float
    The value.
") rhp_mdl_fixvar;
%feature("autodoc", "mdl_getbackend(mdl, /)
--

Get the backend of the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
RhpBackendType
    The backend.
") rhp_mdl_getbackend;
%feature("autodoc", "mdl_getbackendname(mdl, /)
--

Get the backend name of the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
str
    The backend name.
") rhp_mdl_getbackendname;
%feature("autodoc", "mdl_getname(mdl, /)
--

Get the name of the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
str
    The model name.
") rhp_mdl_getname;
%feature("autodoc", "mdl_getid(mdl, /)
--

Get the ID of the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The model ID.
") rhp_mdl_getid;
%feature("autodoc", "newsolvermdl(mdl, /)
--

Instantiate the solver model.

By default the model returned is of the same type as the argument. However, a few mechanism may change that (in order of priority)

Parameters
----------
mdl : Model
    The source model.

Returns
-------
Model
    The solver model.
") rhp_newsolvermdl;
%feature("autodoc", "mdl_setsolvername(mdl, solvername, /)
--

Set the solver name.

Parameters
----------
mdl : Model
    The model.
solvername : str
    The name of the solver.
") rhp_mdl_setsolvername;
%feature("autodoc", "mdl_getsolvername(mdl, /)
--

Get the solver name.

Parameters
----------
mdl : Model
    The model.

Returns
-------
str
    The pointer to the string.
") rhp_mdl_getsolvername;
%feature("autodoc", "mdl_gettype(mdl, /)
--

Get the problem type associated with the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The type.
") rhp_mdl_gettype;
%feature("autodoc", "mdl_getsense(mdl, /)
--

Get the sense of the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The sense.
") rhp_mdl_getsense;
%feature("autodoc", "mdl_settype(mdl, type, /)
--

Set the model type.

Parameters
----------
mdl : Model
    The model.
type : int
    The model type.
") rhp_mdl_settype;
%feature("autodoc", "mdl_setobjsense(mdl, objsense, /)
--

Set the sense of a Model .

Parameters
----------
mdl : Model
    The model.
objsense : int
    The new sense.
") rhp_mdl_setobjsense;
%feature("autodoc", "mdl_resize(mdl, n, m, /)
--

Resize the container object.

This function resize the space for the variables, equations and their metadata

Parameters
----------
mdl : Model
    The model.
n : int
    The new number of variables.
m : int
    The new number of equations.
") rhp_mdl_resize;
%feature("autodoc", "mdl_printvarname(mdl, vi, /)
--

Return the name of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
str
    The variable name.
") rhp_mdl_printvarname;
%feature("autodoc", "mdl_printequname(mdl, ei, /)
--

Return the name of a equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
str
    The equation name.
") rhp_mdl_printequname;
%feature("autodoc", "mdl_getmpforvar(mdl, vi, /)
--

Return the MP (mathematical program) associated with a variable, if any.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
MathPrgm
    The MP owning this variable.
") rhp_mdl_getmpforvar;
%feature("autodoc", "mdl_getmpforequ(mdl, ei, /)
--

Return the MP (mathematical program) associated with a equation, if any.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
MathPrgm
    The MP owning this equation.
") rhp_mdl_getmpforequ;
%feature("autodoc", "mdl_getequtype(mdl, ei, /)
--

Return the type of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation.

Returns
-------
int
    The equation type.
int
    The equation cone.
") rhp_mdl_getequtype;
%feature("autodoc", "mdl_getspecialfloats(mdl, /)
--

Get special floating-point values (like the infinities and NaN).

Parameters
----------
mdl : Model
    The model.

Returns
-------
float
    The value of -INF.
float
    The value of +INF.
float
    The value of NaN (Not a Number).
") rhp_mdl_getspecialfloats;
%feature("autodoc", "mdl_getequbyname(mdl, name, /)
--

Get an equation by its name.

Parameters
----------
mdl : Model
    The model.
name : str
    The name of the equation.

Returns
-------
EquationRef
    The equation index.
") rhp_mdl_getequbyname;
%feature("autodoc", "mdl_getvarbyname(mdl, name, /)
--

Get a variable by its name.

Parameters
----------
mdl : Model
    The model.
name : str
    The variable name.

Returns
-------
VariableRef
    The variable index.
") rhp_mdl_getvarbyname;
%feature("autodoc", "mdl_exportmodel(mdl, mdl_dst, /)
--

Export a model to another instance.

This create a new model instance, with possibly a different backend, that represents the same model instance, possibly filtered.

Parameters
----------
mdl : Model
    The source model.
mdl_dst : Model
    The destination model.
") rhp_mdl_exportmodel;
%feature("autodoc", "mdl_getvarperp(mdl, vi, /)
--

Get the equation perpendicular (or matched) with a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
EquationRef
    The equation index.
") rhp_mdl_getvarperp;
%feature("autodoc", "mdl_getvarbasis(mdl, vi, /)
--

Get the basis status of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
BasisStatus
    The variable basis status.
") rhp_mdl_getvarbasis;
%feature("autodoc", "mdl_getvarlb(mdl, vi, /)
--

Get the lower bound of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable lower bound.
") rhp_mdl_getvarlb;
%feature("autodoc", "mdl_getvarmult(mdl, vi, /)
--

Get the multiplier of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable multiplier.
") rhp_mdl_getvarmult;
%feature("autodoc", "mdl_getvarval(mdl, vi, /)
--

Get the value of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable value.
") rhp_mdl_getvarval;
%feature("autodoc", "mdl_getvartype(mdl, vi, /)
--

Get the type of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
int
    The variable basis status.
") rhp_mdl_getvartype;
%feature("autodoc", "mdl_getvarub(mdl, vi, /)
--

Get the value of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable value.
") rhp_mdl_getvarub;
%feature("autodoc", "mdl_getvarbounds(mdl, vi, /)
--

Get a variable upper and lower bound.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The lower bound of the variable (could be -INF).
float
    The upper bound of the variable (could be +INF).
") rhp_mdl_getvarbounds;
%feature("autodoc", "mdl_getvarsmult(mdl, v, /)
--

Get the multipliers (if available) for an abstract variable.

Parameters
----------
mdl : Model
    The model.
v : Vars
    The abstract var.

Returns
-------
float
    The multiplier array.
") rhp_mdl_getvarsmult;
%feature("autodoc", "mdl_getvarsval(mdl, v, /)
--

Get the values for an abstract variable.

Parameters
----------
mdl : Model
    The model.
v : Vars
    The abstract var.

Returns
-------
float
    The values array.
") rhp_mdl_getvarsval;
%feature("autodoc", "mdl_getvarsbasis(mdl, v, /)
--

Get the basis status (if available) for an abstract variable.

Parameters
----------
mdl : Model
    The model.
v : Vars
    The abstract var.

Returns
-------
array of BasisStatus
    The basis array.
") rhp_mdl_getvarsbasis;
%feature("autodoc", "mdl_getequcst(mdl, ei, /)
--

Get the constant of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The constant value.
") rhp_mdl_getequcst;
%feature("autodoc", "mdl_getequperp(mdl, ei, /)
--

Get the matching variable of an equation.

If there is no matching variable, then a invalid index is returned

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
VariableRef
    The matched variable index.
") rhp_mdl_getequperp;
%feature("autodoc", "mdl_getequbasis(mdl, ei, /)
--

Get the basis status of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
BasisStatus
    The basis status.
") rhp_mdl_getequbasis;
%feature("autodoc", "mdl_getequval(mdl, ei, /)
--

Get the value of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The value.
") rhp_mdl_getequval;
%feature("autodoc", "mdl_getequmult(mdl, ei, /)
--

Get the multiplier of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The multiplier.
") rhp_mdl_getequmult;
%feature("autodoc", "mdl_getequsmult(mdl, e, /)
--

Get the multipliers (if available) for an abstract equation.

Parameters
----------
mdl : Model
    The model.
e : Equs
    The abstract equation.

Returns
-------
float
    The multiplier array.
") rhp_mdl_getequsmult;
%feature("autodoc", "mdl_getequsval(mdl, e, /)
--

Get the values for an abstract equation.

Parameters
----------
mdl : Model
    The model.
e : Equs
    The abstract equation.

Returns
-------
float
    The values array.
") rhp_mdl_getequsval;
%feature("autodoc", "mdl_getequsbasis(mdl, e, /)
--

Get the basis status (if available) for an abstract equation.

Parameters
----------
mdl : Model
    The model.
e : Equs
    The abstract equation.

Returns
-------
array of BasisStatus
    The basis array.
") rhp_mdl_getequsbasis;
%feature("autodoc", "mdl_setobjvar(mdl, objvar, /)
--

Set the objective variable.

Parameters
----------
mdl : Model
    The model.
objvar : VariableRef or int
    The objective variable index.
") rhp_mdl_setobjvar;
%feature("autodoc", "mdl_setvarbasis(mdl, vi, basis_status, /)
--

Set the basis status of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.
basis_status : BasisStatus or int
    The basis status of the variable.
") rhp_mdl_setvarbasis;
%feature("autodoc", "mdl_setvarbounds(mdl, vi, lb, ub, /)
--

Set the bounds of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
lb : float
    The variable lower bound.
ub : float
    The variable upper bound.
") rhp_mdl_setvarbounds;
%feature("autodoc", "mdl_setvarlb(mdl, vi, lb, /)
--

Set the lower bound of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
lb : float
    The variable lower bound.
") rhp_mdl_setvarlb;
%feature("autodoc", "mdl_setvarmult(mdl, vi, mult, /)
--

Set the multiplier of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
mult : float
    The variable multiplier.
") rhp_mdl_setvarmult;
%feature("autodoc", "mdl_setvarname(mdl, vi, name, /)
--

Set the name of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
name : str
    The variable name.
") rhp_mdl_setvarname;
%feature("autodoc", "mdl_setvartype(mdl, vi, type, /)
--

Set the type of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
type : int
    The variable type.
") rhp_mdl_setvartype;
%feature("autodoc", "mdl_setvarub(mdl, vi, ub, /)
--

Set the upper bound of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
ub : float
    The variable upper bound.
") rhp_mdl_setvarub;
%feature("autodoc", "mdl_setvarval(mdl, vi, val, /)
--

Set the value of a variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable.
val : float
    The variable name.
") rhp_mdl_setvarval;
%feature("autodoc", "mdl_setequbasis(mdl, ei, basis_status, /)
--

Set the basis status of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
basis_status : BasisStatus or int
    The basis status.
") rhp_mdl_setequbasis;
%feature("autodoc", "mdl_setequcst(mdl, ei, val, /)
--

Set the constant value of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
val : float
    The constant value.
") rhp_mdl_setequcst;
%feature("autodoc", "mdl_setequname(mdl, ei, name, /)
--

Set the name of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation.
name : str
    The equation name.
") rhp_mdl_setequname;
%feature("autodoc", "mdl_setequmult(mdl, ei, mult, /)
--

Set the multiplier of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
mult : float
    The equation multiplier.
") rhp_mdl_setequmult;
%feature("autodoc", "mdl_setequval(mdl, ei, val, /)
--

Set the (level) value of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
val : float
    The value.
") rhp_mdl_setequval;
%feature("autodoc", "mdl_setequvarperp(mdl, ei, vi, /)
--

Store the matching between a variable and an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation.
vi : VariableRef or int
    The variable.
") rhp_mdl_setequvarperp;
%feature("autodoc", "mdl_setequtype(mdl, ei, type, cone, /)
--

Set the type of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
type : int
    The equation type.
cone : int
    The equation cone.
") rhp_mdl_setequtype;
%feature("autodoc", "mdl_getobjequs(mdl, /)
--

Get the objective equations in a model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
Equs
    The array of objective equations.
") rhp_mdl_getobjequs;
%feature("autodoc", "mdl_getobjequ(mdl, /)
--

Return the objective equation.

Note that this may not be a valid index

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The objective equation.
") rhp_mdl_getobjequ;
%feature("autodoc", "mdl_getobjvar(mdl, /)
--

Get the objective variable.

Note that it is not guaranteed to be a valid index

Parameters
----------
mdl : Model
    The model.

Returns
-------
VariableRef
    The objective variable.
") rhp_mdl_getobjvar;
%feature("autodoc", "mdl_getmodelstat(mdl, /)
--

Get the model status.

Parameters
----------
mdl : Model
    The model.

Returns
-------
ModelStatus
    The model status.
") rhp_mdl_getmodelstat;
%feature("autodoc", "mdl_getsolvestat(mdl, /)
--

Get the solve status of a model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
SolveStatus
    The solve status.
") rhp_mdl_getsolvestat;
%feature("autodoc", "mdl_getallequsmult(mdl, /)
--

Get all equations multiplier.

Parameters
----------
mdl : Model
    The model.

Returns
-------
float
    The multiplier array, of appropriate size.
") rhp_mdl_getallequsmult;
%feature("autodoc", "mdl_getallequsval(mdl, /)
--

Get all equations values.

Parameters
----------
mdl : Model
    The model.

Returns
-------
float
    The value array, of appropriate size.
") rhp_mdl_getallequsval;
%feature("autodoc", "mdl_getallvarsmult(mdl, /)
--

Get all variables multipliers.

Parameters
----------
mdl : Model
    The model.

Returns
-------
float
    The multipliers array, of appropriate size.
") rhp_mdl_getallvarsmult;
%feature("autodoc", "mdl_getallvarsval(mdl, /)
--

Get all variables values.

Parameters
----------
mdl : Model
    The model.

Returns
-------
float
    The value array, of appropriate size.
") rhp_mdl_getallvarsval;
%feature("autodoc", "mdl_setequrhs(mdl, ei, val, /)
--

Set the RHS of an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
val : float
    The value of the RHS.
") rhp_mdl_setequrhs;
%feature("autodoc", "mdl_modelstattxt(mdl, modelstat, /)
--

Get the textual description of a model status.

Parameters
----------
mdl : Model
    The model.
modelstat : int
    The model status.

Returns
-------
str
    The string describing the model status.
") rhp_mdl_modelstattxt;
%feature("autodoc", "mdl_solvestattxt(mdl, solvestat, /)
--

Get the textual description of a solve status.

Parameters
----------
mdl : Model
    The model.
solvestat : int
    The solve status.

Returns
-------
str
    The string describing the solve status.
") rhp_mdl_solvestattxt;
%feature("autodoc", "mdl_nequs(mdl, /)
--

Get the number of (active) equations in the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of active equations.
") rhp_mdl_nequs;
%feature("autodoc", "mdl_nvars(mdl, /)
--

Get the number of (active) variables in the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of active variables.
") rhp_mdl_nvars;
%feature("autodoc", "mdl_nequs_total(mdl, /)
--

Get the total number of equations in the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The total number of equations.
") rhp_mdl_nequs_total;
%feature("autodoc", "mdl_nvars_total(mdl, /)
--

Get the total number of variables in the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The total number of variables.
") rhp_mdl_nvars_total;
%feature("autodoc", "mp_addconstraint(mp, ei, /)
--

Add a constraint to this MP.

Parameters
----------
mp : MathPrgm
    The MP.
ei : EquationRef or int
    The constraint to add.
") rhp_mp_addconstraint;
%feature("autodoc", "mp_addequ(mp, ei, /)
--

Add an equation to an MP.

This should only be used when the type of the equation has already been set in a different way. This is for instance useful to add a VI function to an MP. Otherwise use mp_addconstraint() or mp_addvipair()

Parameters
----------
mp : MathPrgm
    The MP.
ei : EquationRef or int
    The equation to add.
") rhp_mp_addequ;
%feature("autodoc", "mp_setobjequ(mp, objequ, /)
--

Set the objective equation of an MP.

Parameters
----------
mp : MathPrgm
    The MP.
objequ : EquationRef or int
    The objective equation.
") rhp_mp_setobjequ;
%feature("autodoc", "mp_setobjvar(mp, objvar, /)
--

Set the objective variable of an MP.

Parameters
----------
mp : MathPrgm
    The MP.
objvar : VariableRef or int
    The objective variable.
") rhp_mp_setobjvar;
%feature("autodoc", "mp_addvar(mp, vi, /)
--

Add a variable to an MP.

Parameters
----------
mp : MathPrgm
    The MP.
vi : VariableRef or int
    The variable index.
") rhp_mp_addvar;
%feature("autodoc", "mp_addvars(mp, v, /)
--

Add variables to an MP.

Parameters
----------
mp : MathPrgm
    The MP.
v : Vars
    The variable container.
") rhp_mp_addvars;
%feature("autodoc", "mp_addvipair(mp, ei, vi, /)
--

Add a vi pair (equ,var) to the MP.

Parameters
----------
mp : MathPrgm
    The MP.
ei : EquationRef or int
    The equation index. If invalid, the equ is the zero function.
vi : VariableRef or int
    The variable index.
") rhp_mp_addvipair;
%feature("autodoc", "mp_addvipairs(mp, e, v, /)
--

Add a vi pair (equ, var) to the MP.

Parameters
----------
mp : MathPrgm
    The MP.
e : Equs
    The equation indices.
v : Vars
    The variable indices.
") rhp_mp_addvipairs;
%feature("autodoc", "mp_finalize(mp, /)
--

Finalize the MP creation.

Call this when the MP has been completed. This functions looks to set the objective function

Parameters
----------
mp : struct rhp_mathprgm *
    The MP.
") rhp_mp_finalize;
%feature("autodoc", "mp_getobjequ(mp, /)
--

Get the objective equation of an MP.

Parameters
----------
mp : MathPrgm
    The MP.

Returns
-------
EquationRef
    The objective equation index (could be invalid).
") rhp_mp_getobjequ;
%feature("autodoc", "mp_getid(mp, /)
--

Get the ID of an MP.

Parameters
----------
mp : MathPrgm
    The MP.

Returns
-------
int
    The ID.
") rhp_mp_getid;
%feature("autodoc", "mp_getmdl(mp, /)
--

Get the model associated with a MP.

Parameters
----------
mp : struct rhp_mathprgm *
    The MP.

Returns
-------
Model
    The Model associated with the MP.
") rhp_mp_getmdl;
%feature("autodoc", "mp_getsense(mp, /)
--

Get the sense of this MP.

Parameters
----------
mp : MathPrgm
    The mathprgm.

Returns
-------
int
    The sense. If the MP has no sense, the RNP_NOSENSE.
") rhp_mp_getsense;
%feature("autodoc", "mp_getobjvar(mp, /)
--

Get the objective variable of an MP.

Parameters
----------
mp : MathPrgm
    The MP.

Returns
-------
VariableRef
    The objective variable index (could be invalid).
") rhp_mp_getobjvar;
%feature("autodoc", "mp_print(mp, /)
--

Print the content of an MP.

Parameters
----------
mp : MathPrgm
    The MP.
") rhp_mp_print;
%feature("autodoc", "mp_setname(mp, name, /)
--

Set the name of an MP.

Parameters
----------
mp : MathPrgm
    The MP.
name : str
    The name.
") rhp_mp_setname;
%feature("autodoc", "mpe_getid(mpe, /)
--

Get the ID of a Nash equilibrium.

Parameters
----------
mpe : Nash
    The.

Returns
-------
int
    The ID, or UINT_MAX on error.
") rhp_mpe_getid;
%feature("autodoc", "mpe_getname(mpe, /)
--

Get the name of a Nash equilibrium.

Parameters
----------
mpe : Nash
    The.

Returns
-------
str
    The name, or NULL on error.
") rhp_mpe_getname;
%feature("autodoc", "mpe_getnumchildren(mpe, /)
--

Get the number of children of a Nash equilibrium.

Parameters
----------
mpe : Nash
    The.

Returns
-------
int
    The number of children, or UINT_MAX on error.
") rhp_mpe_getnumchildren;
%feature("autodoc", "mpe_print(mpe, /)
--

Print the content of a Nash equilibrium.

Parameters
----------
mpe : Nash
    The.
") rhp_mpe_print;
%feature("autodoc", "nltree_getroot(tree, /)
--

Get the address of the root node of an expression tree.

If the root node does not exists, it gets created.

Parameters
----------
tree : NlTree
    The expression tree.

Returns
-------
NlNode **
    On output, holds the address of the root node.
") rhp_nltree_getroot;
%feature("autodoc", "nltree_getchild(node, i, /)
--

Get the address of a child of a node.

Parameters
----------
node : NlNode **
    The node.
i : int
    The index of the child.

Returns
-------
NlNode **
    On output, holds the address of the i-th child.
") rhp_nltree_getchild;
%feature("autodoc", "nltree_getchild2(node, i, /)
--

Get the address of a child of a node.

Parameters
----------
node : NlNode ***
    The node.
i : int
    The index of the child.

Returns
-------
NlNode **
    On output, holds the address of the i-th child.
") rhp_nltree_getchild2;
%feature("autodoc", "nltree_arithm(tree, node, opcode, nb, /)
--

Add an arithmetic operation to the expression tree.

Parameters
----------
tree : NlTree
    The expression tree.
node : NlNode ***
    The node where to add the relation.
opcode : int
    The opcode for the binary relation.
nb : int
    The number of terms involved by the relation.
") rhp_nltree_arithm;
%feature("autodoc", "nltree_call(mdl, tree, node, opcode, n_args, /)
--

Add a function call to the expression tree.

The problem type may be changed if function that is added is nonsmooth

Parameters
----------
mdl : Model
    The model.
tree : NlTree
    The expression tree.
node : NlNode ***
    The current node.
opcode : int
    The opcode corresponding to the function.
n_args : int
    The number of arguments (see enum func_code).
") rhp_nltree_call;
%feature("autodoc", "nltree_cst(mdl, tree, node, cst, /)
--

Put a constant in a node (CST node).

The node must point to a valid memory area that contains a NULL object (e.g. *node is non-null but **node is NULL)

Parameters
----------
mdl : Model
    The model.
tree : NlTree
    The expression tree.
node : NlNode ***
    The current node.
cst : float
    The constant.
") rhp_nltree_cst;
%feature("autodoc", "nltree_umin(tree, node, /)
--

Add a umin to an expression tree.

Parameters
----------
tree : NlTree
    The expression tree.
node : NlNode ***
    The current node.
") rhp_nltree_umin;
%feature("autodoc", "nltree_var(mdl, tree, node, vi, coeff, /)
--

Add a variable in the tree.

Parameters
----------
mdl : Model
    The model.
tree : NlTree
    The tree.
node : NlNode ***
    The current node.
vi : VariableRef or int
    The variable.
coeff : float
    The constant.
") rhp_nltree_var;
%feature("autodoc", "ovf_param_add_scalar(ovf_def, param_name, val, /)
--

Add a scalar parameter value to an OVF definition.

Parameters
----------
ovf_def : OvfDef
    The definition of the OVF.
param_name : str
    The parameter name.
val : float
    The value of the parameter.
") rhp_ovf_param_add_scalar;
%feature("autodoc", "ovf_param_add_vector(ovf_def, param_name, size, vec, /)
--

Add a vector parameter value to an OVF definition.

Parameters
----------
ovf_def : OvfDef
    The definition of the OVF.
param_name : str
    The parameter name.
size : int
    The number of values.
vec : array-like of float
    The values of the parameter.
") rhp_ovf_param_add_vector;
%feature("autodoc", "ovf_check(mdl, ovf_def, /)
--

Check that an OVF is well defined.

Parameters
----------
mdl : Model
    The model.
ovf_def : OvfDef
    The OVF definition to check.
") rhp_ovf_check;
%feature("autodoc", "ovf_setreformulation(ovf_def, reformulation, /)
--

Set a reformulation for the given OVF.

Parameters
----------
ovf_def : OvfDef
    The OVF definition to check.
reformulation : str
    The reformulation.
") rhp_ovf_setreformulation;
%feature("autodoc", "equ_addbilin(mdl, ei, v1, v2, coeff, /)
--

Add a bilinear term to an equation.

Add  :math:`c \\langle v1, v2 \\rangle`

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
v1 : Vars
    The first variable.
v2 : Vars
    The second variable.
coeff : float
    The general coefficient.
") rhp_equ_addbilin;
%feature("autodoc", "equ_addlin(mdl, ei, v, coeffs, /)
--

Add a linear expression < a , x > to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
") rhp_equ_addlin;
%feature("autodoc", "equ_addlincoeff(mdl, ei, v, coeffs, coeff, /)
--

Add a linear expression c < a , x > to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
coeff : float
    The coefficient for the expression.
") rhp_equ_addlincoeff;
%feature("autodoc", "equ_addlinchk(mdl, ei, v, coeffs, /)
--

Add a linear expression < c , x > to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
") rhp_equ_addlinchk;
%feature("autodoc", "equ_addlvar(mdl, ei, vi, val, /)
--

Add a variable to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
vi : VariableRef or int
    The variable index.
val : float
    The coefficient for the variable.
") rhp_equ_addlvar;
%feature("autodoc", "equ_addnewlvar(mdl, ei, vi, val, /)
--

Add a variable to an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation.
vi : VariableRef or int
    The variable index.
val : float
    The coefficient for the variable.
") rhp_equ_addnewlvar;
%feature("autodoc", "equ_setcst(mdl, ei, val, /)
--

Set the constant of a mapping.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
val : float
    The value.
") rhp_equ_setcst;
%feature("autodoc", "equ_getcst(mdl, ei, /)
--

Get the constant of a mapping.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The value.
") rhp_equ_getcst;
%feature("autodoc", "equ_getlin(mdl, ei, /)
--

Get the linear part of an equation, if any.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
LinearEquation
    The linear equation.
") rhp_equ_getlin;
%feature("autodoc", "get_nb_lequ_le(mdl, /)
--

Get the number of 'less-than' (or '<=' ) linear equations.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of 'less-than' linear equations.
") rhp_get_nb_lequ_le;
%feature("autodoc", "get_nb_lequ_ge(mdl, /)
--

Get the number of 'greater-than' (or '>=' ) linear equations.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of 'greater-than' linear equations.
") rhp_get_nb_lequ_ge;
%feature("autodoc", "get_nb_lequ_eq(mdl, /)
--

Get the number of 'equal-to' (or '==', '=' ) linear equations.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of equality linear equations.
") rhp_get_nb_lequ_eq;
%feature("autodoc", "get_nb_var_bin(mdl, /)
--

Get the number of binary variables.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of binary variables.
") rhp_get_nb_var_bin;
%feature("autodoc", "get_nb_var_int(mdl, /)
--

Get the number of integer variables.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of integer variables.
") rhp_get_nb_var_int;
%feature("autodoc", "get_nb_var_lb(mdl, /)
--

Get the number of variables with a finite lower bound.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of variable with a finite lower bound.
") rhp_get_nb_var_lb;
%feature("autodoc", "get_nb_var_ub(mdl, /)
--

Get the number of variables with a finite upper bound.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of variable with a finite upper bound.
") rhp_get_nb_var_ub;
%feature("autodoc", "get_nb_var_interval(mdl, /)
--

Get the number of variables with both a finite lower and upper bound.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of variable with both a finite lower and upper bound.
") rhp_get_nb_var_interval;
%feature("autodoc", "get_nb_var_fx(mdl, /)
--

Get the number of variables of fixed variables.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    The number of fixed variables.
") rhp_get_nb_var_fx;
%feature("autodoc", "get_nb_var_sos1(mdl, /)
--

Get the number of SOS1 variables.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    On success the number of SOS1 variable on failure, RHP_INVALID_IDX.
") rhp_get_nb_var_sos1;
%feature("autodoc", "get_nb_var_sos2(mdl, /)
--

Get the number of SOS2 variables.

Parameters
----------
mdl : Model
    The model.

Returns
-------
int
    On success the number of SOS2 variable on failure, RHP_INVALID_IDX.
") rhp_get_nb_var_sos2;
%feature("autodoc", "get_var_sos1(mdl, vi, /)
--

Get the information associated with a SOS1 variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
array of int
    The group.
") rhp_get_var_sos1;
%feature("autodoc", "get_var_sos2(mdl, vi, /)
--

Get the information associated with a SOS2 variable.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.

Returns
-------
array of int
    The group.
") rhp_get_var_sos2;
%feature("autodoc", "set_var_sos1(mdl, v, weights, /)
--

Set variables as part of a (weighted) SOS1 group.

Parameters
----------
mdl : Model
    The model.
v : Vars
    The variables.
weights : array-like of float
    If non-NULL, gives the weight in the SOS1 group.
") rhp_set_var_sos1;
%feature("autodoc", "set_var_sos2(mdl, v, weights, /)
--

Set variables as part of a (weighted) SOS2 group.

Parameters
----------
mdl : Model
    The model.
v : Vars
    The variables.
weights : array-like of float
    If non-NULL, gives the weight in the SOS1 group.
") rhp_set_var_sos2;
%feature("autodoc", "mdl_getopttype(mdl, optname, /)
--

Get the type of an option.

Parameters
----------
mdl : Model
    The model.
optname : str
    The name of the option.

Returns
-------
int
    The option type.
") rhp_mdl_getopttype;
%feature("autodoc", "mdl_setopt_c(mdl, optname, choice, /)
--

Set an option of type string.

Parameters
----------
mdl : Model
    The model.
optname : str
    The name of the option.
choice : str
    The choice for the option.
") rhp_mdl_setopt_c;
%feature("autodoc", "is_var_valid(mdl, vi, /)
--

Return 1 if the index points to a valid variable, 0 otherwise.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable index.
") rhp_is_var_valid;
%feature("autodoc", "is_equ_valid(mdl, ei, /)
--

Return 1 if the index points valid equation, 0 otherwise.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.
") rhp_is_equ_valid;
%feature("autodoc", "add_equation(mdl, /)
--

Add an equation to the model.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_equation;
%feature("autodoc", "add_equations(mdl, size, /)
--

Add equations to the model.

Parameters
----------
mdl : Model
    The model.
size : int
    Number of equations to add.

Returns
-------
Equs
    The equation.
") rhp_add_equations;
%feature("autodoc", "delete_equ(mdl, ei, /)
--

Delete an equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation to remove.
") rhp_delete_equ;
%feature("autodoc", "delete_var(mdl, vi, /)
--

Delete a variable from the model.

Parameters
----------
mdl : Model
    The model.
vi : VariableRef or int
    The variable to delete.
") rhp_delete_var;
%feature("autodoc", "mdl_latex(mdl, filename, /)
--

Write out the model in a latex form.

@TODO document how to use the file

Parameters
----------
mdl : Model
    The model.
filename : str
    The filename to store the latex.
") rhp_mdl_latex;
%feature("autodoc", "mdl_reserve_equs(mdl, size, /)
--

Reserve memory for additional equations.

Parameters
----------
mdl : Model
    The model.
size : int
    The number of equation.
") rhp_mdl_reserve_equs;
%feature("autodoc", "mdl_reserve_vars(mdl, size, /)
--

Reserve memory for additional variables.

Parameters
----------
mdl : Model
    The model.
size : int
    The number of variables.
") rhp_mdl_reserve_vars;
%feature("autodoc", "mdl_getnltree(mdl, ei, /)
--

Get the expression tree.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The equation index.

Returns
-------
NlTree
    If success, a pointer to the expression tree Otherwise, NULL.
") rhp_mdl_getnltree;
%feature("autodoc", "mdl_setobjequ(mdl, ei, /)
--

Set a given equation as the objective equation.

Parameters
----------
mdl : Model
    The model.
ei : EquationRef or int
    The objective equation index.
") rhp_mdl_setobjequ;
%feature("autodoc", "avar_new()
--

Create an abstract variable.

Returns
-------
Vars
    The abstract variable, or NULL if the allocation failed.
") rhp_avar_new;
%feature("autodoc", "avar_newcompact(size, start, /)
--

Create a (vector) variable of continuous indices.

Parameters
----------
size : int
    Size of the variable.
start : int
    Index of the first component of the variable.

Returns
-------
Vars
    The new abstract variable.
") rhp_avar_newcompact;
%feature("autodoc", "avar_newlist(size, vis, /)
--

Create a (vector) variable which the indices are not necessarily in consecutive order.

Parameters
----------
size : int
    Size of the variable.
vis : array-like of VariableRef or int
    Array of indices.

Returns
-------
Vars
    The new abstract variable.
") rhp_avar_newlist;
%feature("autodoc", "avar_newlistcopy(size, vis, /)
--

Create a (vector) variable which the indices are not necessarily in consecutive order.

This function duplicates the list of indices

Parameters
----------
size : int
    Size of the variable.
vis : array-like of VariableRef or int
    Array of indices.

Returns
-------
Vars
    The new abstract variable.
") rhp_avar_newlistcopy;
%feature("autodoc", "avar_free(v, /)
--

Free all the memory allocated in the variable.

Parameters
----------
v : Vars
    The variable to free.
") rhp_avar_free;
%feature("autodoc", "avar_get(v, i, /)
--

Get the variable stored at an index.

Parameters
----------
v : Vars
    The abstract variable.
i : int
    The index of the abstract variable.

Returns
-------
int
    The variable index.
") rhp_avar_get;
%feature("autodoc", "avar_set_list(v, size, vis, /)
--

Set the abstract as a list.

Parameters
----------
v : Vars
    The abstract variable.
size : int
    The length of the list.
vis : array-like of VariableRef or int
    The array of indices.
") rhp_avar_set_list;
%feature("autodoc", "avar_get_list(v, /)
--

Get the list associated with a variable container.

Parameters
----------
v : Vars
    The variable container.

Returns
-------
array of int
    The array of indices.
") rhp_avar_get_list;
%feature("autodoc", "avar_gettype(v, /)
--

Access the type of a variable container.

Parameters
----------
v : Vars
    The variable container.

Returns
-------
int
    The type of the variable container.
") rhp_avar_gettype;
%feature("autodoc", "avar_ownmem(v, /)
--

Return true if the variable container owns its memory.

Parameters
----------
v : Vars
    The variable container.

Returns
-------
Bool
    True if the variable container owns its memory.
") rhp_avar_ownmem;
%feature("autodoc", "avar_size(v, /)
--

Return the size of an abstract variable.

Parameters
----------
v : Vars
    The abstract variable.

Returns
-------
int
    The length, or 0 is the argument is NULL.
") rhp_avar_size;
%feature("autodoc", "avar_gettypename(v, /)
--

Return the string description of the type of a variable container.

Parameters
----------
v : Vars
    The variable container.

Returns
-------
str
    The string description.
") rhp_avar_gettypename;
%feature("autodoc", "avar_contains(v, vi, /)
--

Check if an abstract variable contains a given index.

Parameters
----------
v : Vars
    The variable container.
vi : VariableRef or int
    The variable index.

Returns
-------
int
    0 if it is not contained, positive number if it is, a negative number for an error.
") rhp_avar_contains;
%feature("autodoc", "ovf_add(mdl, name, ovf_vi, v_args, /)
--

Add an OVF variable.

This is mainly for declaring OVF variable via an API. The last argument returns a pointer to the OVF definitional structure, which can be used to set parameters

Parameters
----------
mdl : Model
    The model.
name : str
    Name of the OVF function.
ovf_vi : rhp_idx
    Index of the OVF variable.
v_args : Vars
    Arguments for the OVF.

Returns
-------
OvfDef
    Ovf definition structure.
") rhp_ovf_add;
%feature("autodoc", "PATH_setfname(fname, /)
--

Set the filename of the PATH library.

Parameters
----------
fname : str
    The filename of the PATH library.
") rhp_PATH_setfname;
%feature("autodoc", "print_emp(mdl, /)
--

Print the EMP information.

Parameters
----------
mdl : Model
    The model.
") rhp_print_emp;
%feature("autodoc", "mdl_new(backend, /)
--

Allocate a ReSHOP model for a given container.

Parameters
----------
backend : int
    The backend for the model.

Returns
-------
Model
    The ReSHOP model.
") rhp_mdl_new;
%feature("autodoc", "mdl_free(mdl, /)
--

Free a reshop model and release the container and empinfo structures.

Parameters
----------
mdl : Model
    The reshop model to free.
") rhp_mdl_free;
%feature("autodoc", "postprocess(mdl_solver, /)
--

Postprocessed the models, from the solver model back to the input one.

Report the values (level, multipliers) of the variables and equations This function starts from the solver model, and backpropagates the values to the model, until the original one.

Parameters
----------
mdl_solver : Model
    The model used by the solver.
") rhp_postprocess;
%feature("autodoc", "solve(mdl, /)
--

Solve the model.

Parameters
----------
mdl : Model
    Model to solve.
") rhp_solve;
%feature("autodoc", "process(mdl, mdl_solver, /)
--

Process the input model into a model for the solver.

Firstly, if there are some EMP information, the model is transformed

Parameters
----------
mdl : Model
    The user or input model.
mdl_solver : Model
    The solver model.
") rhp_process;
%feature("autodoc", "getidxmax()
--

Return the largest valid index or size.

Returns
-------
int
    Maximum index or size value. Anything larger indicates an error.
") rhp_getidxmax;
%feature("autodoc", "sensestr(sense, /)
--

Get the textual representation of a 'sense' value.

Parameters
----------
sense : int
    The sense value.

Returns
-------
str
    The string representation of the sense value.
") rhp_sensestr;
%feature("autodoc", "status_descr(status, /)
--

The textual representation of a status value.

Parameters
----------
status : int
    The status value.

Returns
-------
str
    The string representation of the status value.
") rhp_status_descr;
%feature("autodoc", "set_printops(data, print, flush, use_asciicolors, /)
--

Set the printing operators.

Parameters
----------
data : void *
    User-defined environment.
print : rhp_print_fn
    The print function.
flush : rhp_flush_fn
    The flush function.
use_asciicolors : Bool
    If false, remove any ASCII color from the messages.
") rhp_set_printops;
%feature("autodoc", "set_printopsdefault()
--

Set the printing operators to be the defaults ones.
") rhp_set_printopsdefault;
%feature("autodoc", "add_var(mdl, /)
--

Add one free variable.

Parameters
----------
mdl : Model
    The model.

Returns
-------
VariableRef
    The resulting variable index.
") rhp_add_var;
%feature("autodoc", "add_vars(mdl, size, /)
--

Add a variable with a given name.

A copy of the string parameter is performed

Parameters
----------
mdl : Model
    The model.
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
") rhp_add_vars;
%feature("autodoc", "add_posvars(mdl, size, /)
--

Add a positive variable with a given name.

A copy of the string parameter is performed

Parameters
----------
mdl : Model
    The model.
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
") rhp_add_posvars;
%feature("autodoc", "add_negvars(mdl, size, /)
--

Add a negative variable with a given name.

A copy of the string parameter is performed

Parameters
----------
mdl : Model
    The model.
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
") rhp_add_negvars;
%feature("autodoc", "add_varsinbox(mdl, size, lb, ub, /)
--

Add box-constrainted variables.

Parameters
----------
mdl : Model
    The model.
size : int
    The number of variables.
lb : float
    The common lower bound.
ub : float
    The common upper bound.

Returns
-------
Vars
    The variable.
") rhp_add_varsinbox;
%feature("autodoc", "add_varsinboxes(mdl, size, lbs, ubs, /)
--

Add box-constrainted variables.

Parameters
----------
mdl : Model
    The model.
size : int
    The number of variables.
lbs : array-like of float
    The common lower bound (optional: if not set, then -infinity).
ubs : array-like of float
    The common upper bound (optional: if not set, then +infinity).

Returns
-------
Vars
    The variable container.
") rhp_add_varsinboxes;
%feature("autodoc", "add_con(mdl, cone, /)
--

Add a constraint with a given name.

A copy of the string parameter is performed

Parameters
----------
mdl : Model
    The model.
cone : int
    The size of the constraint.

Returns
-------
EquationRef
    The constraint index.
") rhp_add_con;
%feature("autodoc", "add_cons(mdl, size, type, /)
--

Add a named constraint.

Parameters
----------
mdl : Model
    The model.
size : int
    The size of the constraint.
type : int
    The type of constraint.

Returns
-------
Equs
    The constraint container.
") rhp_add_cons;
%feature("autodoc", "add_func(mdl, /)
--

Add a named function (or mapping).

This is may be use for objective variables, but not for equation/inclusion

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The function index.
") rhp_add_func;
%feature("autodoc", "add_funcs(mdl, size, /)
--

Add a named function (or mapping).

This is may be use for objective variables, but not for equation/inclusion

Parameters
----------
mdl : Model
    The model.
size : int
    The size of mapping.

Returns
-------
Equs
    The container for indices.
") rhp_add_funcs;
%feature("autodoc", "add_equality_constraint(mdl, /)
--

Add an equality constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_equality_constraint;
%feature("autodoc", "add_exp_constraint(mdl, /)
--

Add an exponential cone constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_exp_constraint;
%feature("autodoc", "add_greaterthan_constraint(mdl, /)
--

Add an greater-than constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_greaterthan_constraint;
%feature("autodoc", "add_lessthan_constraint(mdl, /)
--

Add a less-than constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_lessthan_constraint;
%feature("autodoc", "add_power_constraint(mdl, /)
--

Add a power cone constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_power_constraint;
%feature("autodoc", "add_soc_constraint(mdl, /)
--

Add a second-order cone (SOC) constraint.

Parameters
----------
mdl : Model
    The model.

Returns
-------
EquationRef
    The equation index.
") rhp_add_soc_constraint;
%feature("autodoc", "Add a quadratic term to an equation.
**Signature 1: `equ_addquad(mdl,ei,v_row,v_col,nnz,i,j,x,coeff)`**
Add a quadratic equation to the model.

The matrix is in COO/triplet format

Parameters
----------
mdl : Model *
    The model.
ei : rhp_idx
    The equation index.
v_row : Avar *
    The abstract variable for the row indices.
v_col : Avar *
    The abstract variable for the col indices.
nnz : size_t
    The number of quadratic terms.
i : unsigned *
    The row indices.
j : unsigned *
    The column indices.
x : double *
    The quadratic coefficients.
coeff : double
    The general coefficient.

Returns
-------
int
    The error code.
**Signature 1: `equ_addquad(mdl,ei,nnz,i,j,x,coeff)`**
Add a quadratic equation to the model.

The matrix is in COO/triplet format

Parameters
----------
mdl : Model *
    The model.
ei : rhp_idx
    The equation index.
nnz : size_t
    The number of quadratic terms.
i : unsigned *
    The row indices.
j : unsigned *
    The column indices.
x : double *
    The quadratic coefficients.
coeff : double
    The general coefficient.

Returns
-------
int
    The error code.

") rhp_equ_addquad;
