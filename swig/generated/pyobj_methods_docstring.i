// Generated by doxy2numpydoc.py

// Generated by swig_generate_methods_from_api.py

%feature("docstring") rhp_mdl::fixvar "fixvar(vi, val, /)
--

Fix a variable to a given value.

Parameters
----------
vi : VariableRef or int
    The variable index.
val : float
    The value.
";
%feature("docstring") rhp_mdl::getvarsmult "getvarsmult(v, /)
--

Get the multipliers (if available) for an abstract variable.

Parameters
----------
v : Vars
    The abstract var.

Returns
-------
float
    The multiplier array.
";
%feature("docstring") rhp_mdl::getvarsbasis "getvarsbasis(v, /)
--

Get the basis status (if available) for an abstract variable.

Parameters
----------
v : Vars
    The abstract var.

Returns
-------
array of BasisStatus
    The basis array.
";
%feature("docstring") rhp_mdl::getvarsval "getvarsval(v, /)
--

Get the values for an abstract variable.

Parameters
----------
v : Vars
    The abstract var.

Returns
-------
float
    The values array.
";
%feature("docstring") rhp_mdl::getequsmult "getequsmult(e, /)
--

Get the multipliers (if available) for an abstract equation.

Parameters
----------
e : Equs
    The abstract equation.

Returns
-------
float
    The multiplier array.
";
%feature("docstring") rhp_mdl::getequsbasis "getequsbasis(e, /)
--

Get the basis status (if available) for an abstract equation.

Parameters
----------
e : Equs
    The abstract equation.

Returns
-------
array of BasisStatus
    The basis array.
";
%feature("docstring") rhp_mdl::getequsval "getequsval(e, /)
--

Get the values for an abstract equation.

Parameters
----------
e : Equs
    The abstract equation.

Returns
-------
float
    The values array.
";
%feature("docstring") rhp_mdl::getequbyname "getequbyname(name, /)
--

Get an equation by its name.

Parameters
----------
name : str
    The name of the equation.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::getallequsmult "getallequsmult()
--

Get all equations multiplier.

Returns
-------
float
    The multiplier array, of appropriate size.
";
%feature("docstring") rhp_mdl::getallequsval "getallequsval()
--

Get all equations values.

Returns
-------
float
    The value array, of appropriate size.
";
%feature("docstring") rhp_mdl::getallvarsmult "getallvarsmult()
--

Get all variables multipliers.

Returns
-------
float
    The multipliers array, of appropriate size.
";
%feature("docstring") rhp_mdl::getallvarsval "getallvarsval()
--

Get all variables values.

Returns
-------
float
    The value array, of appropriate size.
";
%feature("docstring") rhp_mdl::getequbasis "getequbasis(ei, /)
--

Get the basis status of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
BasisStatus
    The basis status.
";
%feature("docstring") rhp_mdl::getequcst "getequcst(ei, /)
--

Get the constant of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The constant value.
";
%feature("docstring") rhp_mdl::getequval "getequval(ei, /)
--

Get the value of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The value.
";
%feature("docstring") rhp_mdl::getequperp "getequperp(ei, /)
--

Get the matching variable of an equation.

If there is no matching variable, then a invalid index is returned

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
VariableRef
    The matched variable index.
";
%feature("docstring") rhp_mdl::getequmult "getequmult(ei, /)
--

Get the multiplier of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The multiplier.
";
%feature("docstring") rhp_mdl::getequtype "getequtype(ei, /)
--

Return the type of an equation.

Parameters
----------
ei : EquationRef or int
    The equation.

Returns
-------
int
    The equation type.
int
    The equation cone.
";
%feature("docstring") rhp_mdl::getmodelstat "getmodelstat()
--

Get the model status.

Returns
-------
ModelStatus
    The model status.
";
%feature("docstring") rhp_mdl::getobjequ "getobjequ()
--

Return the objective equation.

Note that this may not be a valid index

Returns
-------
EquationRef
    The objective equation.
";
%feature("docstring") rhp_mdl::getobjequs "getobjequs()
--

Get the objective equations in a model.

Returns
-------
Equs
    The array of objective equations.
";
%feature("docstring") rhp_mdl::getsense "getsense()
--

Get the sense of the model.

Returns
-------
int
    The sense.
";
%feature("docstring") rhp_mdl::getobjvar "getobjvar()
--

Get the objective variable.

Note that it is not guaranteed to be a valid index

Returns
-------
VariableRef
    The objective variable.
";
%feature("docstring") rhp_mdl::gettype "gettype()
--

Get the problem type associated with the model.

Returns
-------
int
    The type.
";
%feature("docstring") rhp_mdl::getsolvername "getsolvername()
--

Get the solver name.

Returns
-------
str
    The pointer to the string.
";
%feature("docstring") rhp_mdl::getsolvestat "getsolvestat()
--

Get the solve status of a model.

Returns
-------
SolveStatus
    The solve status.
";
%feature("docstring") rhp_mdl::getspecialfloats "getspecialfloats()
--

Get special floating-point values (like the infinities and NaN).

Returns
-------
float
    The value of -INF.
float
    The value of +INF.
float
    The value of NaN (Not a Number).
";
%feature("docstring") rhp_mdl::getvarperp "getvarperp(vi, /)
--

Get the equation perpendicular (or matched) with a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::getvarbasis "getvarbasis(vi, /)
--

Get the basis status of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
BasisStatus
    The variable basis status.
";
%feature("docstring") rhp_mdl::getvarbounds "getvarbounds(vi, /)
--

Get a variable upper and lower bound.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The lower bound of the variable (could be -INF).
float
    The upper bound of the variable (could be +INF).
";
%feature("docstring") rhp_mdl::getvarbyname "getvarbyname(name, /)
--

Get a variable by its name.

Parameters
----------
name : str
    The variable name.

Returns
-------
VariableRef
    The variable index.
";
%feature("docstring") rhp_mdl::getvarlb "getvarlb(vi, /)
--

Get the lower bound of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable lower bound.
";
%feature("docstring") rhp_mdl::getvarval "getvarval(vi, /)
--

Get the value of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable value.
";
%feature("docstring") rhp_mdl::getvarmult "getvarmult(vi, /)
--

Get the multiplier of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable multiplier.
";
%feature("docstring") rhp_mdl::getvartype "getvartype(vi, /)
--

Get the type of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
int
    The variable basis status.
";
%feature("docstring") rhp_mdl::getvarub "getvarub(vi, /)
--

Get the value of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
float
    The variable value.
";
%feature("docstring") rhp_mdl::setname "setname(name, /)
--

Set the model name.

Parameters
----------
name : str
    The name.
";
%feature("docstring") rhp_mdl::resize "resize(n, m, /)
--

Resize the container object.

This function resize the space for the variables, equations and their metadata

Parameters
----------
n : int
    The new number of variables.
m : int
    The new number of equations.
";
%feature("docstring") rhp_mdl::setequbasis "setequbasis(ei, basis_status, /)
--

Set the basis status of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
basis_status : BasisStatus or int
    The basis status.
";
%feature("docstring") rhp_mdl::setequcst "setequcst(ei, val, /)
--

Set the constant value of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
val : float
    The constant value.
";
%feature("docstring") rhp_mdl::setequname "setequname(ei, name, /)
--

Set the name of an equation.

Parameters
----------
ei : EquationRef or int
    The equation.
name : str
    The equation name.
";
%feature("docstring") rhp_mdl::setequmult "setequmult(ei, mult, /)
--

Set the multiplier of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
mult : float
    The equation multiplier.
";
%feature("docstring") rhp_mdl::setequtype "setequtype(ei, type, cone, /)
--

Set the type of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
type : int
    The equation type.
cone : int
    The equation cone.
";
%feature("docstring") rhp_mdl::setequvarperp "setequvarperp(ei, vi, /)
--

Store the matching between a variable and an equation.

Parameters
----------
ei : EquationRef or int
    The equation.
vi : VariableRef or int
    The variable.
";
%feature("docstring") rhp_mdl::setequval "setequval(ei, val, /)
--

Set the (level) value of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
val : float
    The value.
";
%feature("docstring") rhp_mdl::settype "settype(type, /)
--

Set the model type.

Parameters
----------
type : int
    The model type.
";
%feature("docstring") rhp_mdl::setobjsense "setobjsense(objsense, /)
--

Set the sense of a Model .

Parameters
----------
objsense : int
    The new sense.
";
%feature("docstring") rhp_mdl::setobjvar "setobjvar(objvar, /)
--

Set the objective variable.

Parameters
----------
objvar : VariableRef or int
    The objective variable index.
";
%feature("docstring") rhp_mdl::setequrhs "setequrhs(ei, val, /)
--

Set the RHS of an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
val : float
    The value of the RHS.
";
%feature("docstring") rhp_mdl::setsolvername "setsolvername(solvername, /)
--

Set the solver name.

Parameters
----------
solvername : str
    The name of the solver.
";
%feature("docstring") rhp_mdl::setvarbasis "setvarbasis(vi, basis_status, /)
--

Set the basis status of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.
basis_status : BasisStatus or int
    The basis status of the variable.
";
%feature("docstring") rhp_mdl::setvarbounds "setvarbounds(vi, lb, ub, /)
--

Set the bounds of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
lb : float
    The variable lower bound.
ub : float
    The variable upper bound.
";
%feature("docstring") rhp_mdl::setvarlb "setvarlb(vi, lb, /)
--

Set the lower bound of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
lb : float
    The variable lower bound.
";
%feature("docstring") rhp_mdl::setvarmult "setvarmult(vi, mult, /)
--

Set the multiplier of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
mult : float
    The variable multiplier.
";
%feature("docstring") rhp_mdl::setvarname "setvarname(vi, name, /)
--

Set the name of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
name : str
    The variable name.
";
%feature("docstring") rhp_mdl::setvartype "setvartype(vi, type, /)
--

Set the type of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
type : int
    The variable type.
";
%feature("docstring") rhp_mdl::setvarub "setvarub(vi, ub, /)
--

Set the upper bound of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
ub : float
    The variable upper bound.
";
%feature("docstring") rhp_mdl::setvarval "setvarval(vi, val, /)
--

Set the value of a variable.

Parameters
----------
vi : VariableRef or int
    The variable.
val : float
    The variable name.
";
%feature("docstring") rhp_mdl::exportmodel "exportmodel(mdl_dst, /)
--

Export a model to another instance.

This create a new model instance, with possibly a different backend, that represents the same model instance, possibly filtered.

Parameters
----------
mdl_dst : Model
    The destination model.
";
%feature("docstring") rhp_mdl::ensure_mp "ensure_mp(reserve, /)
--

Reserve space for mathematical programms.

This is the first function to call if there are such EMP structure

Parameters
----------
reserve : int
    The number of MP that should have space.
";
%feature("docstring") rhp_mdl::empdag_rootsetmp "empdag_rootsetmp(mp, /)
--

Set the root of the EMP dag to a mathematical program.

Parameters
----------
mp : MathPrgm
    The mathematical program.
";
%feature("docstring") rhp_mdl::empdag_rootsetmpe "empdag_rootsetmpe(mpe, /)
--

Set the root of the EMP dag to an equilibrium.

Parameters
----------
mpe : Nash
    The equilibrium.
";
%feature("docstring") rhp_mdl::gms_setgamscntr "gms_setgamscntr(cntrfile, /)
--

Set the gams control file for a given model.

Parameters
----------
cntrfile : str
    The gams control file.
";
%feature("docstring") rhp_mdl::gms_setgamsdir "gms_setgamsdir(gamsdir, /)
--

Set the gams system directory for a given model.

Parameters
----------
gamsdir : str
    The gams system directory.
";
%feature("docstring") rhp_mdl::gms_writesol2gdx "gms_writesol2gdx(gdxname, /)
--

Write the GMO solution of a GAMS model to a GDX file.

Parameters
----------
gdxname : str
    The GDX file name.
";
%feature("docstring") rhp_mdl::empdag_mpaddmpVF "empdag_mpaddmpVF(mp, mp_child, arcVF, /)
--

Add a value function arc between two MathPrgm.

Parameters
----------
mp : MathPrgm
    The parent MathPrgm.
mp_child : MathPrgm
    The child MathPrgm.
arcVF : ArcVFData
    The value function arc.
";
%feature("docstring") rhp_mdl::empdag_mpaddmpCTRL "empdag_mpaddmpCTRL(mp, mp_child, /)
--

Add a control arc between two MathPrgm.

Parameters
----------
mp : MathPrgm
    The parent MathPrgm.
mp_child : MathPrgm
    The child MathPrgm.
";
%feature("docstring") rhp_mdl::empdag_mpeaddmp "empdag_mpeaddmp(mp, /)
--

Add a mathematical programm into the equilibrium.

Parameters
----------
mp : MathPrgm
    The mathematical programm.
";
%feature("docstring") rhp_mdl::add_var "add_var()
--

Add one free variable.

Returns
-------
VariableRef
    The resulting variable index.
";
%feature("docstring") rhp_mdl::add_vars "add_vars(size, /)
--

Add a variable with a given name.

A copy of the string parameter is performed

Parameters
----------
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
";
%feature("docstring") rhp_mdl::add_posvars "add_posvars(size, /)
--

Add a positive variable with a given name.

A copy of the string parameter is performed

Parameters
----------
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
";
%feature("docstring") rhp_mdl::add_negvars "add_negvars(size, /)
--

Add a negative variable with a given name.

A copy of the string parameter is performed

Parameters
----------
size : int
    The size of the variable.

Returns
-------
Vars
    The variable container.
";
%feature("docstring") rhp_mdl::add_varsinbox "add_varsinbox(size, lb, ub, /)
--

Add box-constrainted variables.

Parameters
----------
size : int
    The number of variables.
lb : float
    The common lower bound.
ub : float
    The common upper bound.

Returns
-------
Vars
    The variable.
";
%feature("docstring") rhp_mdl::add_varsinboxes "add_varsinboxes(size, lbs, ubs, /)
--

Add box-constrainted variables.

Parameters
----------
size : int
    The number of variables.
lbs : array-like of float
    The common lower bound (optional: if not set, then -infinity).
ubs : array-like of float
    The common upper bound (optional: if not set, then +infinity).

Returns
-------
Vars
    The variable container.
";
%feature("docstring") rhp_mdl::set_var_sos1 "set_var_sos1(v, weights, /)
--

Set variables as part of a (weighted) SOS1 group.

Parameters
----------
v : Vars
    The variables.
weights : array-like of float
    If non-NULL, gives the weight in the SOS1 group.
";
%feature("docstring") rhp_mdl::set_var_sos2 "set_var_sos2(v, weights, /)
--

Set variables as part of a (weighted) SOS2 group.

Parameters
----------
v : Vars
    The variables.
weights : array-like of float
    If non-NULL, gives the weight in the SOS1 group.
";
%feature("docstring") rhp_mdl::add_con "add_con(cone, /)
--

Add a constraint with a given name.

A copy of the string parameter is performed

Parameters
----------
cone : int
    The size of the constraint.

Returns
-------
EquationRef
    The constraint index.
";
%feature("docstring") rhp_mdl::add_cons "add_cons(size, type, /)
--

Add a named constraint.

Parameters
----------
size : int
    The size of the constraint.
type : int
    The type of constraint.

Returns
-------
Equs
    The constraint container.
";
%feature("docstring") rhp_mdl::add_func "add_func()
--

Add a named function (or mapping).

This is may be use for objective variables, but not for equation/inclusion

Returns
-------
EquationRef
    The function index.
";
%feature("docstring") rhp_mdl::add_funcs "add_funcs(size, /)
--

Add a named function (or mapping).

This is may be use for objective variables, but not for equation/inclusion

Parameters
----------
size : int
    The size of mapping.

Returns
-------
Equs
    The container for indices.
";
%feature("docstring") rhp_mdl::setobjequ "setobjequ(ei, /)
--

Set a given equation as the objective equation.

Parameters
----------
ei : EquationRef or int
    The objective equation index.
";
%feature("docstring") rhp_mdl::add_equation "add_equation()
--

Add an equation to the model.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_equations "add_equations(size, /)
--

Add equations to the model.

Parameters
----------
size : int
    Number of equations to add.

Returns
-------
Equs
    The equation.
";
%feature("docstring") rhp_mdl::add_equality_constraint "add_equality_constraint()
--

Add an equality constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_exp_constraint "add_exp_constraint()
--

Add an exponential cone constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_greaterthan_constraint "add_greaterthan_constraint()
--

Add an greater-than constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_lessthan_constraint "add_lessthan_constraint()
--

Add a less-than constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_power_constraint "add_power_constraint()
--

Add a power cone constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::add_soc_constraint "add_soc_constraint()
--

Add a second-order cone (SOC) constraint.

Returns
-------
EquationRef
    The equation index.
";
%feature("docstring") rhp_mdl::equ_addbilin "equ_addbilin(ei, v1, v2, coeff, /)
--

Add a bilinear term to an equation.

Add  :math:`c \\langle v1, v2 \\rangle`

Parameters
----------
ei : EquationRef or int
    The equation index.
v1 : Vars
    The first variable.
v2 : Vars
    The second variable.
coeff : float
    The general coefficient.
";
%feature("docstring") rhp_mdl::equ_addlin "equ_addlin(ei, v, coeffs, /)
--

Add a linear expression < a , x > to an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
";
%feature("docstring") rhp_mdl::equ_addlinchk "equ_addlinchk(ei, v, coeffs, /)
--

Add a linear expression < c , x > to an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
";
%feature("docstring") rhp_mdl::equ_addlincoeff "equ_addlincoeff(ei, v, coeffs, coeff, /)
--

Add a linear expression c < a , x > to an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
v : Vars
    The abstract variable.
coeffs : array-like of float
    The coefficients of the variables.
coeff : float
    The coefficient for the expression.
";
%feature("docstring") rhp_mdl::equ_addlvar "equ_addlvar(ei, vi, val, /)
--

Add a variable to an equation.

Parameters
----------
ei : EquationRef or int
    The equation index.
vi : VariableRef or int
    The variable index.
val : float
    The coefficient for the variable.
";
%feature("docstring") rhp_mdl::equ_addnewlvar "equ_addnewlvar(ei, vi, val, /)
--

Add a variable to an equation.

Parameters
----------
ei : EquationRef or int
    The equation.
vi : VariableRef or int
    The variable index.
val : float
    The coefficient for the variable.
";
%feature("docstring") rhp_mdl::equ_setcst "equ_setcst(ei, val, /)
--

Set the constant of a mapping.

Parameters
----------
ei : EquationRef or int
    The equation index.
val : float
    The value.
";
%feature("docstring") rhp_mdl::equ_getcst "equ_getcst(ei, /)
--

Get the constant of a mapping.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
float
    The value.
";
%feature("docstring") rhp_mdl::equ_getlin "equ_getlin(ei, /)
--

Get the linear part of an equation, if any.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
LinearEquation
    The linear equation.
";
%feature("docstring") rhp_mdl::delete_equ "delete_equ(ei, /)
--

Delete an equation.

Parameters
----------
ei : EquationRef or int
    The equation to remove.
";
%feature("docstring") rhp_mdl::delete_var "delete_var(vi, /)
--

Delete a variable from the model.

Parameters
----------
vi : VariableRef or int
    The variable to delete.
";
%feature("docstring") rhp_mdl::is_var_valid "is_var_valid(vi, /)
--

Return 1 if the index points to a valid variable, 0 otherwise.

Parameters
----------
vi : VariableRef or int
    The variable index.
";
%feature("docstring") rhp_mdl::is_equ_valid "is_equ_valid(ei, /)
--

Return 1 if the index points valid equation, 0 otherwise.

Parameters
----------
ei : EquationRef or int
    The equation index.
";
%feature("docstring") rhp_mdl::nltree_call "nltree_call(tree, node, opcode, n_args, /)
--

Add a function call to the expression tree.

The problem type may be changed if function that is added is nonsmooth

Parameters
----------
tree : NlTree
    The expression tree.
node : NlNode ***
    The current node.
opcode : int
    The opcode corresponding to the function.
n_args : int
    The number of arguments (see enum func_code).
";
%feature("docstring") rhp_mdl::nltree_cst "nltree_cst(tree, node, cst, /)
--

Put a constant in a node (CST node).

The node must point to a valid memory area that contains a NULL object (e.g. *node is non-null but **node is NULL)

Parameters
----------
tree : NlTree
    The expression tree.
node : NlNode ***
    The current node.
cst : float
    The constant.
";
%feature("docstring") rhp_mdl::nltree_var "nltree_var(tree, node, vi, coeff, /)
--

Add a variable in the tree.

Parameters
----------
tree : NlTree
    The tree.
node : NlNode ***
    The current node.
vi : VariableRef or int
    The variable.
coeff : float
    The constant.
";
%feature("docstring") rhp_mdl::nltree_addquad "nltree_addquad(ei, mat, v, coeff, /)
--

Add a quadratic term :math:`.5 x^TMx` to an equation.

Parameters
----------
ei : EquationRef or int
    The equation to modify.
mat : scipy matrix
    The matrix.
v : Vars
    The variable.
coeff : float
    The coefficient multiplying the quadratic. Note that is coefficient is multiplied by .5.
";
%feature("docstring") rhp_mdl::nltree_addlin "nltree_addlin(ei, c, v, coeff, /)
--

Add :math:`\\alpha <c,x>` to the nonlinear part of the equation.

Parameters
----------
ei : EquationRef or int
    The equation to modify.
c : array-like of float
    The values of c.
v : Vars
    The variable x.
coeff : float
    The coefficient.
";
%feature("docstring") rhp_mdl::reserve_equs "reserve_equs(size, /)
--

Reserve memory for additional equations.

Parameters
----------
size : int
    The number of equation.
";
%feature("docstring") rhp_mdl::reserve_vars "reserve_vars(size, /)
--

Reserve memory for additional variables.

Parameters
----------
size : int
    The number of variables.
";
%feature("docstring") rhp_mdl::latex "latex(filename, /)
--

Write out the model in a latex form.

@TODO document how to use the file

Parameters
----------
filename : str
    The filename to store the latex.
";
%feature("docstring") rhp_mdl::ovf_add "ovf_add(name, ovf_vi, v_args, /)
--

Add an OVF variable.

This is mainly for declaring OVF variable via an API. The last argument returns a pointer to the OVF definitional structure, which can be used to set parameters

Parameters
----------
name : str
    Name of the OVF function.
ovf_vi : rhp_idx
    Index of the OVF variable.
v_args : Vars
    Arguments for the OVF.

Returns
-------
OvfDef
    Ovf definition structure.
";
%feature("docstring") rhp_mdl::ovf_check "ovf_check(ovf_def, /)
--

Check that an OVF is well defined.

Parameters
----------
ovf_def : OvfDef
    The OVF definition to check.
";
%feature("docstring") rhp_mdl::process "process(mdl_solver, /)
--

Process the input model into a model for the solver.

Firstly, if there are some EMP information, the model is transformed

Parameters
----------
mdl_solver : Model
    The solver model.
";
%feature("docstring") rhp_mdl::postprocess "postprocess()
--

Postprocessed the models, from the solver model back to the input one.

Report the values (level, multipliers) of the variables and equations This function starts from the solver model, and backpropagates the values to the model, until the original one.
";
%feature("docstring") rhp_mdl::get_var_sos1 "get_var_sos1(vi, /)
--

Get the information associated with a SOS1 variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
array of int
    The group.
";
%feature("docstring") rhp_mdl::get_var_sos2 "get_var_sos2(vi, /)
--

Get the information associated with a SOS2 variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
array of int
    The group.
";
%feature("docstring") rhp_mdl::setopt_c "setopt_c(optname, choice, /)
--

Set an option of type string.

Parameters
----------
optname : str
    The name of the option.
choice : str
    The choice for the option.
";
%feature("docstring") rhp_mdl::getopttype "getopttype(optname, /)
--

Get the type of an option.

Parameters
----------
optname : str
    The name of the option.

Returns
-------
int
    The option type.
";
%feature("docstring") rhp_mathprgm::addconstraint "addconstraint(ei, /)
--

Add a constraint to this MP.

Parameters
----------
ei : EquationRef or int
    The constraint to add.
";
%feature("docstring") rhp_mathprgm::addequ "addequ(ei, /)
--

Add an equation to an MP.

This should only be used when the type of the equation has already been set in a different way. This is for instance useful to add a VI function to an MP. Otherwise use mp_addconstraint() or mp_addvipair()

Parameters
----------
ei : EquationRef or int
    The equation to add.
";
%feature("docstring") rhp_mathprgm::addvar "addvar(vi, /)
--

Add a variable to an MP.

Parameters
----------
vi : VariableRef or int
    The variable index.
";
%feature("docstring") rhp_mathprgm::addvars "addvars(v, /)
--

Add variables to an MP.

Parameters
----------
v : Vars
    The variable container.
";
%feature("docstring") rhp_mathprgm::addvipair "addvipair(ei, vi, /)
--

Add a vi pair (equ,var) to the MP.

Parameters
----------
ei : EquationRef or int
    The equation index. If invalid, the equ is the zero function.
vi : VariableRef or int
    The variable index.
";
%feature("docstring") rhp_mathprgm::addvipairs "addvipairs(e, v, /)
--

Add a vi pair (equ, var) to the MP.

Parameters
----------
e : Equs
    The equation indices.
v : Vars
    The variable indices.
";
%feature("docstring") rhp_mathprgm::finalize "finalize()
--

Finalize the MP creation.

Call this when the MP has been completed. This functions looks to set the objective function
";
%feature("docstring") rhp_mathprgm::getobjequ "getobjequ()
--

Get the objective equation of an MP.

Returns
-------
EquationRef
    The objective equation index (could be invalid).
";
%feature("docstring") rhp_mathprgm::getobjvar "getobjvar()
--

Get the objective variable of an MP.

Returns
-------
VariableRef
    The objective variable index (could be invalid).
";
%feature("docstring") rhp_mathprgm::setname "setname(name, /)
--

Set the name of an MP.

Parameters
----------
name : str
    The name.
";
%feature("docstring") rhp_mathprgm::setobjequ "setobjequ(objequ, /)
--

Set the objective equation of an MP.

Parameters
----------
objequ : EquationRef or int
    The objective equation.
";
%feature("docstring") rhp_mathprgm::setobjvar "setobjvar(objvar, /)
--

Set the objective variable of an MP.

Parameters
----------
objvar : VariableRef or int
    The objective variable.
";
%feature("docstring") rhp_mdl::nequs "nequs()
--

Get the number of (active) equations in the model.

Returns
-------
int
    The number of active equations.
";
%feature("docstring") rhp_mdl::nvars "nvars()
--

Get the number of (active) variables in the model.

Returns
-------
int
    The number of active variables.
";
%feature("docstring") rhp_mdl::printequname "printequname(ei, /)
--

Return the name of a equation.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
str
    The equation name.
";
%feature("docstring") rhp_mdl::printvarname "printvarname(vi, /)
--

Return the name of a variable.

Parameters
----------
vi : VariableRef or int
    The variable index.

Returns
-------
str
    The variable name.
";
%feature("docstring") rhp_mdl::modelstattxt "modelstattxt(modelstat, /)
--

Get the textual description of a model status.

Parameters
----------
modelstat : int
    The model status.

Returns
-------
str
    The string describing the model status.
";
%feature("docstring") rhp_mdl::solvestattxt "solvestattxt(solvestat, /)
--

Get the textual description of a solve status.

Parameters
----------
solvestat : int
    The solve status.

Returns
-------
str
    The string describing the solve status.
";
%feature("docstring") rhp_mdl::print_emp "print_emp()
--

Print the EMP information.
";
%feature("docstring") rhp_mdl::empdag_newmp "empdag_newmp(sense, /)
--

Allocate an mathprgm object.

Parameters
----------
sense : int
    The sense of the MP.

Returns
-------
MathPrgm
    The MathPrgm object.
";
%feature("docstring") rhp_mdl::empdag_newmpe "empdag_newmpe()
--

Allocate an equilibrium object.

Returns
-------
Nash
    The equilibrium object.
";
%feature("docstring") rhp_mdl::nvars_total "nvars_total()
--

Get the total number of variables in the model.

Returns
-------
int
    The total number of variables.
";
%feature("docstring") rhp_mdl::nequs_total "nequs_total()
--

Get the total number of equations in the model.

Returns
-------
int
    The total number of equations.
";
%feature("docstring") rhp_mdl::getnltree "getnltree(ei, /)
--

Get the expression tree.

Parameters
----------
ei : EquationRef or int
    The equation index.

Returns
-------
NlTree
    If success, a pointer to the expression tree Otherwise, NULL.
";
%feature("docstring") rhp_mdl::newsolvermdl "newsolvermdl()
--

Instantiate the solver model.

By default the model returned is of the same type as the argument. However, a few mechanism may change that (in order of priority)

Returns
-------
Model
    The solver model.
";
%feature("docstring") rhp_mdl::getbackend "getbackend()
--

Get the backend of the model.

Returns
-------
RhpBackendType
    The backend.
";
%feature("docstring") rhp_mdl::getbackendname "getbackendname()
--

Get the backend name of the model.

Returns
-------
str
    The backend name.
";
%feature("docstring") rhp_mdl::getname "getname()
--

Get the name of the model.

Returns
-------
str
    The model name.
";
%feature("docstring") rhp_mdl::getid "getid()
--

Get the ID of the model.

Returns
-------
int
    The model ID.
";
%feature("docstring") rhp_mdl::get_nb_lequ_le "get_nb_lequ_le()
--

Get the number of 'less-than' (or '<=' ) linear equations.

Returns
-------
int
    The number of 'less-than' linear equations.
";
%feature("docstring") rhp_mdl::get_nb_lequ_ge "get_nb_lequ_ge()
--

Get the number of 'greater-than' (or '>=' ) linear equations.

Returns
-------
int
    The number of 'greater-than' linear equations.
";
%feature("docstring") rhp_mdl::get_nb_lequ_eq "get_nb_lequ_eq()
--

Get the number of 'equal-to' (or '==', '=' ) linear equations.

Returns
-------
int
    The number of equality linear equations.
";
%feature("docstring") rhp_mdl::get_nb_var_bin "get_nb_var_bin()
--

Get the number of binary variables.

Returns
-------
int
    The number of binary variables.
";
%feature("docstring") rhp_mdl::get_nb_var_int "get_nb_var_int()
--

Get the number of integer variables.

Returns
-------
int
    The number of integer variables.
";
%feature("docstring") rhp_mdl::get_nb_var_lb "get_nb_var_lb()
--

Get the number of variables with a finite lower bound.

Returns
-------
int
    The number of variable with a finite lower bound.
";
%feature("docstring") rhp_mdl::get_nb_var_ub "get_nb_var_ub()
--

Get the number of variables with a finite upper bound.

Returns
-------
int
    The number of variable with a finite upper bound.
";
%feature("docstring") rhp_mdl::get_nb_var_interval "get_nb_var_interval()
--

Get the number of variables with both a finite lower and upper bound.

Returns
-------
int
    The number of variable with both a finite lower and upper bound.
";
%feature("docstring") rhp_mdl::get_nb_var_fx "get_nb_var_fx()
--

Get the number of variables of fixed variables.

Returns
-------
int
    The number of fixed variables.
";
%feature("docstring") rhp_mdl::get_nb_var_sos1 "get_nb_var_sos1()
--

Get the number of SOS1 variables.

Returns
-------
int
    On success the number of SOS1 variable on failure, RHP_INVALID_IDX.
";
%feature("docstring") rhp_mdl::get_nb_var_sos2 "get_nb_var_sos2()
--

Get the number of SOS2 variables.

Returns
-------
int
    On success the number of SOS2 variable on failure, RHP_INVALID_IDX.
";
%feature("docstring") rhp_mathprgm::getid "getid()
--

Get the ID of an MP.

Returns
-------
int
    The ID.
";
%feature("docstring") rhp_mathprgm::getmdl "getmdl()
--

Get the model associated with a MP.

Returns
-------
Model
    The Model associated with the MP.
";
%feature("docstring") rhp_mathprgm::getsense "getsense()
--

Get the sense of this MP.

Returns
-------
int
    The sense. If the MP has no sense, the RNP_NOSENSE.
";
%feature("docstring") rhp_mathprgm::getname "getname()
--

Get the name of a MathPrgm.

Returns
-------
str
    The name.
";
%feature("docstring") rhp_mathprgm::ncons "ncons()
--

Get the number of constraints in a MathPrgm.

This is the number of constraint in a classical sense, excluding matching for instance

Returns
-------
int
    The number of constraints.
";
%feature("docstring") rhp_mathprgm::nmatched "nmatched()
--

Return the number of matching (or generalized complementarity constraints) in a MathPrgm.

Returns
-------
int
    The number of matching constraint.
";
%feature("docstring") rhp_mathprgm::nvars "nvars()
--

Return the number of variables affected to a MathPrgm.

Returns
-------
int
    The number of variables.
";
%feature("docstring") rhp_nash_equilibrium::getid "mpe_getid()
--

Get the ID of a Nash equilibrium.

Returns
-------
int
    The ID, or UINT_MAX on error.
";
%feature("docstring") rhp_nash_equilibrium::getname "mpe_getname()
--

Get the name of a Nash equilibrium.

Returns
-------
str
    The name, or NULL on error.
";
%feature("docstring") rhp_nash_equilibrium::getnumchildren "mpe_getnumchildren()
--

Get the number of children of a Nash equilibrium.

Returns
-------
int
    The number of children, or UINT_MAX on error.
";
