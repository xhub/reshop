build-leg:
  stage: build
  tags: [puma]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-devel:latest
    entrypoint: [""]
  script:
    - !reference [.get-gams]
    - !reference [.gams-folder-leg]
    - /opt/miniconda3/bin/python3 -m venv pyenv
    - . pyenv/bin/activate
    - pip install swig numpy scipy pytest setuptools
    - export PATH="/cache/gams-installs/$(cat gams_folder_leg.txt):$HOME/.local/bin:$PATH"
    - cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_GAMS_DRIVER=1 -DBUILD_PYTHON=python3 -S .
    - cmake --build build -v 2>&1 | tee build_log.txt
    - cmake --install build -v
    - python3 ciscripts/report_for_log.py gcc build_log.txt warnings.xml

    - ctest --test-dir build --output-junit doctest_results_linux.xml || ctest --test-dir build --rerun-failed --output-on-failure

    # Asan
    - cmake -B build-asan -DCMAKE_BUILD_TYPE=Asan -DBUILD_GAMS_DRIVER=1 -S .
    - cmake --build build-asan
    - cmake --install build-asan

    - export GAMSDIR="/cache/gams-installs/$(cat gams_folder_leg.txt)"
    - export LD_LIBRARY_PATH="$GAMSDIR":$(pwd)/build-asan/test
    - export ASAN_OPTIONS="strict_string_checks=1:detect_invalid_pointer_pairs=100:detect_stack_use_after_return=1:abort_on_error=1"
    - ctest --test-dir build-asan -E gams --output-junit doctest_results_linux.xml || ctest --test-dir build-asan -E gams --rerun-failed --output-on-failure

    # GAMS is leaky
    - export ASAN_OPTIONS="$ASAN_OPTIONS:detect_leaks=0"
    - ctest --test-dir build-asan -R gams || ctest --test-dir build-asan -R gams --rerun-failed --output-on-failure


  needs: [fetch-ci-scripts]
  artifacts:
    name: reshop-leg
    expire_in: 2 hours
    paths: [warnings.xml,build/*.so,build/test,build/gams,build/output,build-asan/test,build-asan/gams,build-asan/output]
    reports:
      junit: warnings.xml

build-debug-leg:
  stage: build
  tags: [puma]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-devel:latest
    entrypoint: [""]
  script:
    - !reference [.get-gams]
    - !reference [.gams-folder-leg]
    - /opt/miniconda3/bin/python3 -m venv pyenv
    - . pyenv/bin/activate
    - pip install swig numpy scipy pytest setuptools
    - export PATH="/cache/gams-installs/$(cat gams_folder_leg.txt):$HOME/.local/bin:$PATH"
    - cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_GAMS_DRIVER=1 -DBUILD_PYTHON=python3 -S .
    - cmake --build build -v 2>&1 | tee build_log.txt
    - cmake --install build -v
    - python3 ciscripts/report_for_log.py gcc build_log.txt warnings.xml
    - ctest --test-dir build --output-junit doctest_results_linux.xml || ctest --test-dir build --rerun-failed --output-on-failure

  needs: [fetch-ci-scripts]
  artifacts:
    name: reshop-debug-leg
    expire_in: 2 hours
    paths: [warnings.xml,build/*.so,build/test,build/gams,build/output]
    reports:
      junit: warnings.xml

# The next two jobs are just there to do some cleanup, if needed
deg-cleanup:
  stage: build
  tags: [corina]
  variables:
    GIT_STRATEGY: none
  before_script:
    - chmod -R +w gamsdir ||  echo "No gamsdir"
    - rm -rf gamsdir ||  echo "No gamsdir"
  script:
    - echo "DONE"

dac-cleanup:
  stage: build
  tags: [macos-arm64]
  variables:
    GIT_STRATEGY: none
  before_script:
    - chmod -R +w gamsdir || echo "No gamsdir"
    - rm -rf gamsdir ||  echo "No gamsdir"
  script:
    - echo "DONE"

build-deg:
  stage: build
  tags: [corina]
  script:
    - !reference [.get-gams]
    - !reference [.gams-folder-deg]
    - python3 -m venv pyenv
    - . pyenv/bin/activate
    - pip install swig numpy scipy pytest setuptools
    - export PATH="$HOME/cache/gams-installs/$(cat gams_folder_deg.txt):$PATH"
    - cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_GAMS_DRIVER=1 -DBUILD_PYTHON=python3 -S .
    - cmake --build build -v 2>&1 | tee build_log.txt
    - cmake --install build -v
    - python3 ciscripts/report_for_log.py gcc build_log.txt warnings.xml

    - ctest --test-dir build --output-junit doctest_results_deg.xml || ctest --test-dir build --rerun-failed --output-on-failure

    # Asan
    - export ASAN_OPTIONS="strict_string_checks=1:detect_invalid_pointer_pairs=100:detect_stack_use_after_return=1:abort_on_error=1"
    - cmake -B build-asan -DCMAKE_BUILD_TYPE=Asan -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_GAMS_DRIVER=1 -S .
    - cmake --build build-asan 
    - cmake --install build-asan

    - ASAN_OPTIONS="$ASAN_OPTIONS:detect_leaks=1" ctest --test-dir build-asan -E gams --output-on-failure
    - export GAMSDIR="/cache/gams-installs/$(cat gams_folder_deg.txt)"
    - export DYLD_LIBRARY_PATH="$GAMSDIR"

    - ctest --test-dir build-asan -R gams || ctest --test-dir build-asan -R gams --rerun-failed --output-on-failure

  needs: [fetch-ci-scripts,deg-cleanup]
  artifacts:
    name: reshop-deg
    expire_in: 2 hours
    paths: [warnings.xml,build/*.dylib,build/test,build/gams,build/output,build-asan/test,build-asan/gams,build-asan/output]
    reports:
      junit: warnings.xml

build-dac:
  stage: build
  tags: [macos-arm64]
  script:
    - !reference [.get-gams]
    - !reference [.gams-folder-dac]
    - python3 -m venv pyenv
    - . pyenv/bin/activate
    - pip install swig numpy scipy pytest setuptools
    - export PATH="$HOME/cache/gams-installs/$(cat gams_folder_dac.txt):$PATH"
    - cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_GAMS_DRIVER=1 -DBUILD_PYTHON=python3 -S .
    - cmake --build build -v 2>&1 | tee build_log.txt
    - cmake --install build -v
    - python3 ciscripts/report_for_log.py clang build_log.txt warnings.xml

    - ctest --test-dir build --output-junit doctest_results_dac.xml || ctest --test-dir build --rerun-failed --output-on-failure

    # Asan
    - export ASAN_OPTIONS="strict_string_checks=1:detect_invalid_pointer_pairs=100:detect_stack_use_after_return=1:abort_on_error=1"
    - cmake -B build-asan -DCMAKE_BUILD_TYPE=Asan -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_GAMS_DRIVER=1 -S .
    - cmake --build build-asan 
    - cmake --install build-asan

    - export GAMSDIR="/cache/gams-installs/$(cat gams_folder_dac.txt)"
    - export DYLD_LIBRARY_PATH="$GAMSDIR"
    - ASAN_OPTIONS="$ASAN_OPTIONS:detect_leaks=1" ctest --test-dir build-asan -E gams --output-on-failure 

    - ctest --test-dir build-asan -R gams || ctest --test-dir build-asan -R gams --rerun-failed --output-on-failure

  needs: [fetch-ci-scripts,dac-cleanup]
  artifacts:
    name: reshop-dac
    paths: [warnings.xml,build/*.dylib,build/test,build/gams,build/output,build-asan/test,build-asan/gams,build-asan/output]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

.pw-run-test: &pw-run-test |
  function Run-Test {
       param (
           [string]$Command,
           [string]$TestSuite,
           [string]$FailureFile
       )
       # Create and switch to the test directory
       New-Item -ItemType Directory -Path $TestSuite -Force | Out-Null
       Set-Location $TestSuite
 
       # Run the command
       & $Command $TestSuite
 
       # Run the GAMS job
       gams.exe $TestSuite lo=2 --solver=reshop
  
       # Check the last line of the failure file for "Failed tests. 0"
       $LastLine = Get-Content -Path $FailureFile | Select-Object -Last 1
       if ($LastLine -notmatch "Failed tests: 0") {
         $Failures = Get-Content -Path $FailureFile
         Get-ChildItem -Path WEX*/*.log | ForEach-Object { Get-Content $_ }
         Get-ChildItem -Path WEX*/*.lst | ForEach-Object { Get-Content $_ }
         throw "Test failed: ${Failures}"
       }
 
       # Return to the original directory
       Set-Location ..
   }

# PowerShell script to find all symbolic links in a Git repository
# and replace them with the content of the files they point to.

.pw-replace-symlinks: &pw-replace-symlinks |
  function Replace-SymlinksWithFiles {
      param()

      # Check if we are in a Git repository
      if (-not (Test-Path .git -PathType Container)) {
          Write-Error "Current directory is not a Git repository."
          return
      }

      Write-Host "Searching for symbolic links in the Git repository..." -ForegroundColor Yellow

      try {
          # Use git ls-files -s to find all symbolic links.
          # The mode for a symbolic link is 120000.
          # The output format is: <mode> <object> <stage> <path>
          $symlinks = git ls-files -s | Where-Object { $_.StartsWith("120000") }

          if (-not $symlinks) {
              Write-Host "No symbolic links found. Exiting." -ForegroundColor Green
              return
          }

          foreach ($line in $symlinks) {
              # Parse the line to get the file path and blob hash.
              $parts = $line.Split(" ", [System.StringSplitOptions]::RemoveEmptyEntries)
              $blobHash = $parts[1]
              $parts = $line.Split("`t", [System.StringSplitOptions]::RemoveEmptyEntries)

              $resolved_path = Resolve-Path $parts[1]
              $filePath = $resolved_path.Path

              Write-Host "Processing symbolic link: $filePath" -ForegroundColor Cyan

              # Get the content of the file the symlink points to.
              # The content of the symlink itself is the path to the target file.
              $targetPath = git cat-file -p $blobHash
              Write-Host "  -> Symlink points to: $targetPath" -ForegroundColor DarkCyan

              $symlinkDir = Split-Path -Path $filePath -Parent
              $resolvedTargetPath = Join-Path -Path $symlinkDir -ChildPath $targetPath
              $srcFile = $resolvedTargetPath

              Write-Host "  -> Copying $srcFile to $filePath..."
              Copy-Item -Path $srcFile -Destination $filePath -Force
          }
 
          Write-Host ""
          Write-Host "Finished replacing all symbolic links with their content." -ForegroundColor Green
      }
      catch {
          Write-Error "An error occurred: $_"
      }
  }

build-wei:
  stage: build
  tags: [pond]
  image:
    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
  script:
    - !reference [.get-gams-wei]
    - !reference [.gams-folder-wei]
    - *pw-run-test
    - *pw-replace-symlinks
    - python -m venv pyenv
    - .\pyenv\Scripts\Activate.ps1
    - pip install swig numpy scipy pytest setuptools
    - $gmsdirname = Get-Content mygmsdir.tmp -Raw
    - $GAMS_PATH = Join-Path -Path (Get-Location) -ChildPath "gamsdir"
    - if (Test-Path "gamsdir") { Remove-Item -Path "gamsdir" -Recurse -Force }

    - Copy-Item -Path "C:\Cache\gams-installs\$gmsdirname" -Destination "gamsdir" -Recurse -Force 

    - $vcvarsallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat"
    - '& $vcvarsallPath x86_amd64'
    - $env:Path = "$GAMS_PATH;$GAMS_PATH\gbin;" + $env:Path

    - cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=icx-cl -DCMAKE_CXX_COMPILER=icx-cl -DBUILD_GAMS_DRIVER=1 -DBUILD_PYTHON=python -S .
    - cmake --build build -v | Tee-Object -FilePath 'build_log.txt'
    - cmake --install build -v
    - python ciscripts/report_for_log.py icl build_log.txt warnings.xml

    - cmake -B build-icl -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=icl -DCMAKE_CXX_COMPILER=icl -DBUILD_GAMS_DRIVER=1 -S .
    - cmake --build build-icl -v | Tee-Object -FilePath 'build_log-icl.txt'
    - cmake --install build-icl -v

    - ctest --test-dir build --output-junit doctest_results_windows.xml; if (-not $?) { ctest --test-dir build --rerun-failed --output-on-failure }

    - if (Test-Path "$GAMS_PATH/gamsconfig.yaml") { Remove-Item -Path "$GAMS_PATH/gamsconfig.yaml" -Force }

    - Copy-Item -Path "build/output/*.dll" -Destination "$GAMS_PATH"
    - Copy-Item -Path "build/output/optreshop.def" -Destination "$GAMS_PATH"

      # Run tests with regular reshop
    - Run-Test -Command "emplib.exe"  -TestSuite "goempgo" -FailureFile "failures_emp.gms"
    - Run-Test -Command "testlib.exe" -TestSuite "quality" -FailureFile "failures_qa.gms"

    # Do this last because of the Path injection
    - Replace-SymlinksWithFiles
    - $env:Path = "C:\tools\msys64\usr\bin;" + $env:Path
    - bash -c 'EMPSLV=reshop test/gams/test.sh'

    - Copy-Item -Path "build-icl/output/*.dll" -Destination "$GAMS_PATH"
    - Copy-Item -Path "build-icl/output/optreshop.def" -Destination "$GAMS_PATH"

      # Run tests with regular reshop
    - Run-Test -Command "emplib.exe"  -TestSuite "goempgo" -FailureFile "failures_emp.gms"
    - Run-Test -Command "testlib.exe" -TestSuite "quality" -FailureFile "failures_qa.gms"
    - bash -c 'EMPSLV=reshop test/gams/test.sh'

    # This currently fails only in CI, not on kermit. Quite hard to investigate
    - ctest --test-dir build-icl/test; if (-not $?) { ctest --test-dir build-icl/test --rerun-failed --output-on-failure }

    # If we can asan to work, then this can be enabled
    #    - Copy-Item -Path "build-asan/output/gmsrhp_ux.out.exe" -Destination "$GAMS_PATH"
    #    - Copy-Item -Path "build-asan/output/gamsconfig_test_asan.yaml" -Destination "$GAMS_PATH/gamsconfig.yaml"
    #    - Get-Content "build-asan/output/gamsconfig_test_asan.yaml"
    #    - Get-Content "$GAMS_PATH/gamsconfig.yaml"
    #    - Run-Test -Command "emplib.exe" -TestSuite "goempgo" -FailureFile "failures_emp.gms"
    #    - Run-Test -Command "testlib.exe" -TestSuite "quality" -FailureFile "failures_qa.gms"

    # TODO: asan support on windows
    # - cmake -G Ninja -B build-asan -DCMAKE_BUILD_TYPE=Asan -DCMAKE_C_COMPILER=icx-cl -DBUILD_GAMS_DRIVER=1 -S .
    # - cmake --build build-asan 
    # - cmake --install build-asan -v

  after_script:
    - if (Test-Path "gamsdir") { Remove-Item -Path "gamsdir" -Recurse -Force }

  needs: [fetch-ci-scripts]
  artifacts:
    name: reshop-wei
    when: always
    expire_in: 2 hours
    paths: 
      - warnings.xml
      - build/test
      - build/gams
      - build/output
      - build/test/doctest_results_windows.xml
      - build-icl/test
      - build-icl/gams
      - build-icl/output
      - goempgo/
      - quality/
    reports:
      junit: warnings.xml
